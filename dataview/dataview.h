#ifndef GENERATED_ASN1SCC_dataview_H
#define GENERATED_ASN1SCC_dataview_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"
#include "asn1crt_encoding.h"


#ifdef  __cplusplus
extern "C" {
#endif


typedef enum {
    DirectiveCode_eof_pdu = 4,
    DirectiveCode_finished_pdu = 5,
    DirectiveCode_ack_pdu = 6,
    DirectiveCode_metadata_pdu = 7,
    DirectiveCode_nak_pdu = 8,
    DirectiveCode_prompt_pdu = 9,
    DirectiveCode_keep_alive_pdu = 12
} cfdpDirectiveCode;

// please use the following macros to avoid breaking code.
#define cfdpDirectiveCode_eof_pdu DirectiveCode_eof_pdu
#define cfdpDirectiveCode_finished_pdu DirectiveCode_finished_pdu
#define cfdpDirectiveCode_ack_pdu DirectiveCode_ack_pdu
#define cfdpDirectiveCode_metadata_pdu DirectiveCode_metadata_pdu
#define cfdpDirectiveCode_nak_pdu DirectiveCode_nak_pdu
#define cfdpDirectiveCode_prompt_pdu DirectiveCode_prompt_pdu
#define cfdpDirectiveCode_keep_alive_pdu DirectiveCode_keep_alive_pdu

flag cfdpDirectiveCode_Equal(const cfdpDirectiveCode* pVal1, const cfdpDirectiveCode* pVal2);

#define ERR_DIRECTIVECODE		1  /*eof-pdu | finished-pdu | ack-pdu | metadata-pdu | nak-pdu | prompt-pdu | keep-alive-pdu*/
flag cfdpDirectiveCode_IsConstraintValid(const cfdpDirectiveCode* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpDirectiveCode cfdpDirectiveCode_constant;
#else
#define cfdpDirectiveCode_constant DirectiveCode_eof_pdu
#endif

void cfdpDirectiveCode_Initialize(cfdpDirectiveCode* pVal);

#define ERR_UPER_ENCODE_DIRECTIVECODE		2  /**/
#define cfdpDirectiveCode_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpDirectiveCode_REQUIRED_BITS_FOR_ENCODING        3

flag cfdpDirectiveCode_Encode(const cfdpDirectiveCode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DIRECTIVECODE		3  /**/
flag cfdpDirectiveCode_Decode(cfdpDirectiveCode* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_DIRECTIVECODE		4  /**/
#define cfdpDirectiveCode_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpDirectiveCode_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag cfdpDirectiveCode_ACN_Encode(const cfdpDirectiveCode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_DIRECTIVECODE		5  /**/
flag cfdpDirectiveCode_ACN_Decode(cfdpDirectiveCode* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    DirectiveSubtypeCode_ack_others = 0,
    DirectiveSubtypeCode_ack_finished = 1
} cfdpDirectiveSubtypeCode;

// please use the following macros to avoid breaking code.
#define cfdpDirectiveSubtypeCode_ack_others DirectiveSubtypeCode_ack_others
#define cfdpDirectiveSubtypeCode_ack_finished DirectiveSubtypeCode_ack_finished

flag cfdpDirectiveSubtypeCode_Equal(const cfdpDirectiveSubtypeCode* pVal1, const cfdpDirectiveSubtypeCode* pVal2);

#define ERR_DIRECTIVESUBTYPECODE		6  /*ack-others | ack-finished*/
flag cfdpDirectiveSubtypeCode_IsConstraintValid(const cfdpDirectiveSubtypeCode* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpDirectiveSubtypeCode cfdpDirectiveSubtypeCode_constant;
#else
#define cfdpDirectiveSubtypeCode_constant DirectiveSubtypeCode_ack_others
#endif

void cfdpDirectiveSubtypeCode_Initialize(cfdpDirectiveSubtypeCode* pVal);

#define ERR_UPER_ENCODE_DIRECTIVESUBTYPECODE		7  /**/
#define cfdpDirectiveSubtypeCode_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpDirectiveSubtypeCode_REQUIRED_BITS_FOR_ENCODING        1

flag cfdpDirectiveSubtypeCode_Encode(const cfdpDirectiveSubtypeCode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DIRECTIVESUBTYPECODE		8  /**/
flag cfdpDirectiveSubtypeCode_Decode(cfdpDirectiveSubtypeCode* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_DIRECTIVESUBTYPECODE		9  /**/
#define cfdpDirectiveSubtypeCode_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpDirectiveSubtypeCode_REQUIRED_BITS_FOR_ACN_ENCODING        4

flag cfdpDirectiveSubtypeCode_ACN_Encode(const cfdpDirectiveSubtypeCode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_DIRECTIVESUBTYPECODE		10  /**/
flag cfdpDirectiveSubtypeCode_ACN_Decode(cfdpDirectiveSubtypeCode* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    ConditionCode_no_error = 0,
    ConditionCode_positive_ack_limit_reached = 1,
    ConditionCode_keep_alive_limit_reached = 2,
    ConditionCode_invalid_transmission_mode = 3,
    ConditionCode_filestore_rejection = 4,
    ConditionCode_file_checksum_failure = 5,
    ConditionCode_file_size_error = 6,
    ConditionCode_nak_limit_reached = 7,
    ConditionCode_inactivity_detected = 8,
    ConditionCode_invalid_file_structure = 9,
    ConditionCode_suspend_request_received = 14,
    ConditionCode_cancel_request_received = 15
} cfdpConditionCode;

// please use the following macros to avoid breaking code.
#define cfdpConditionCode_no_error ConditionCode_no_error
#define cfdpConditionCode_positive_ack_limit_reached ConditionCode_positive_ack_limit_reached
#define cfdpConditionCode_keep_alive_limit_reached ConditionCode_keep_alive_limit_reached
#define cfdpConditionCode_invalid_transmission_mode ConditionCode_invalid_transmission_mode
#define cfdpConditionCode_filestore_rejection ConditionCode_filestore_rejection
#define cfdpConditionCode_file_checksum_failure ConditionCode_file_checksum_failure
#define cfdpConditionCode_file_size_error ConditionCode_file_size_error
#define cfdpConditionCode_nak_limit_reached ConditionCode_nak_limit_reached
#define cfdpConditionCode_inactivity_detected ConditionCode_inactivity_detected
#define cfdpConditionCode_invalid_file_structure ConditionCode_invalid_file_structure
#define cfdpConditionCode_suspend_request_received ConditionCode_suspend_request_received
#define cfdpConditionCode_cancel_request_received ConditionCode_cancel_request_received

flag cfdpConditionCode_Equal(const cfdpConditionCode* pVal1, const cfdpConditionCode* pVal2);

#define ERR_CONDITIONCODE		11  /*no-error | positive-ack-limit-reached | keep-alive-limit-reached | invalid-transmission-mode | filestore-rejection | file-checksum-failure | file-size-error | nak-limit-reached | inactivity-detected | invalid-file-structure | suspend-request-received | cancel-request-received*/
flag cfdpConditionCode_IsConstraintValid(const cfdpConditionCode* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpConditionCode cfdpConditionCode_constant;
#else
#define cfdpConditionCode_constant ConditionCode_no_error
#endif

void cfdpConditionCode_Initialize(cfdpConditionCode* pVal);

#define ERR_UPER_ENCODE_CONDITIONCODE		12  /**/
#define cfdpConditionCode_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpConditionCode_REQUIRED_BITS_FOR_ENCODING        4

flag cfdpConditionCode_Encode(const cfdpConditionCode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_CONDITIONCODE		13  /**/
flag cfdpConditionCode_Decode(cfdpConditionCode* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_CONDITIONCODE		14  /**/
#define cfdpConditionCode_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpConditionCode_REQUIRED_BITS_FOR_ACN_ENCODING        4

flag cfdpConditionCode_ACN_Encode(const cfdpConditionCode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_CONDITIONCODE		15  /**/
flag cfdpConditionCode_ACN_Decode(cfdpConditionCode* pVal, BitStream* pBitStrm, int* pErrCode);
typedef struct {
    byte arr[4];
} cfdpFileChecksum;


flag cfdpFileChecksum_Equal(const cfdpFileChecksum* pVal1, const cfdpFileChecksum* pVal2);

#define ERR_FILECHECKSUM		16  /*(SIZE(4))*/
flag cfdpFileChecksum_IsConstraintValid(const cfdpFileChecksum* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpFileChecksum cfdpFileChecksum_constant;
#else
#define cfdpFileChecksum_constant {.arr  = {[0 ... 4-1] = 0 }}
#endif

void cfdpFileChecksum_Initialize(cfdpFileChecksum* pVal);

#define ERR_UPER_ENCODE_FILECHECKSUM		17  /**/
#define cfdpFileChecksum_REQUIRED_BYTES_FOR_ENCODING       4
#define cfdpFileChecksum_REQUIRED_BITS_FOR_ENCODING        32

flag cfdpFileChecksum_Encode(const cfdpFileChecksum* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_FILECHECKSUM		18  /**/
flag cfdpFileChecksum_Decode(cfdpFileChecksum* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_FILECHECKSUM		19  /**/
#define cfdpFileChecksum_REQUIRED_BYTES_FOR_ACN_ENCODING       4
#define cfdpFileChecksum_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag cfdpFileChecksum_ACN_Encode(const cfdpFileChecksum* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_FILECHECKSUM		20  /**/
flag cfdpFileChecksum_ACN_Decode(cfdpFileChecksum* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint cfdpFileSize;


flag cfdpFileSize_Equal(const cfdpFileSize* pVal1, const cfdpFileSize* pVal2);

#define ERR_FILESIZE		21  /*(0..4294967295)*/
flag cfdpFileSize_IsConstraintValid(const cfdpFileSize* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpFileSize cfdpFileSize_constant;
#else
#define cfdpFileSize_constant 0UL
#endif

void cfdpFileSize_Initialize(cfdpFileSize* pVal);

#define ERR_UPER_ENCODE_FILESIZE		22  /**/
#define cfdpFileSize_REQUIRED_BYTES_FOR_ENCODING       4
#define cfdpFileSize_REQUIRED_BITS_FOR_ENCODING        32

flag cfdpFileSize_Encode(const cfdpFileSize* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_FILESIZE		23  /**/
flag cfdpFileSize_Decode(cfdpFileSize* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_FILESIZE		24  /**/
#define cfdpFileSize_REQUIRED_BYTES_FOR_ACN_ENCODING       4
#define cfdpFileSize_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag cfdpFileSize_ACN_Encode(const cfdpFileSize* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_FILESIZE		25  /**/
flag cfdpFileSize_ACN_Decode(cfdpFileSize* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- cfdpEofPDU --------------------------------------------*/
typedef struct {
    cfdpConditionCode condition_code;
    cfdpFileChecksum file_checksum;
    cfdpFileSize file_size;

} cfdpEofPDU;

flag cfdpEofPDU_Equal(const cfdpEofPDU* pVal1, const cfdpEofPDU* pVal2);

#define ERR_EOFPDU		58  /**/
#define ERR_EOFPDU_CONDITION_CODE_2		31  /**/
#define ERR_EOFPDU_FILE_CHECKSUM_2		43  /**/
#define ERR_EOFPDU_FILE_SIZE_2		53  /**/
flag cfdpEofPDU_IsConstraintValid(const cfdpEofPDU* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpEofPDU cfdpEofPDU_constant;
#else
#define cfdpEofPDU_constant {.condition_code = ConditionCode_no_error, .file_checksum = {.arr  = {[0 ... 4-1] = 0 }}, .file_size = 0UL}
#endif

void cfdpEofPDU_Initialize(cfdpEofPDU* pVal);

#define ERR_UPER_ENCODE_EOFPDU		59  /**/
#define ERR_UPER_ENCODE_EOFPDU_CONDITION_CODE_2		32  /**/
#define ERR_UPER_ENCODE_EOFPDU_FILE_CHECKSUM_2		44  /**/
#define ERR_UPER_ENCODE_EOFPDU_FILE_SIZE_2		54  /**/
#define cfdpEofPDU_REQUIRED_BYTES_FOR_ENCODING       9
#define cfdpEofPDU_REQUIRED_BITS_FOR_ENCODING        68

flag cfdpEofPDU_Encode(const cfdpEofPDU* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_EOFPDU		60  /**/
#define ERR_UPER_DECODE_EOFPDU_CONDITION_CODE_2		33  /**/
#define ERR_UPER_DECODE_EOFPDU_FILE_CHECKSUM_2		45  /**/
#define ERR_UPER_DECODE_EOFPDU_FILE_SIZE_2		55  /**/
flag cfdpEofPDU_Decode(cfdpEofPDU* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_EOFPDU		61  /**/
#define ERR_ACN_ENCODE_EOFPDU_CONDITION_CODE_2		34  /**/
#define ERR_ACN_ENCODE_EOFPDU_SPARE		36  /**/
#define ERR_ACN_ENCODE_EOFPDU_FILE_CHECKSUM_2		46  /**/
#define ERR_ACN_ENCODE_EOFPDU_FILE_SIZE_2		56  /**/
#define cfdpEofPDU_REQUIRED_BYTES_FOR_ACN_ENCODING       9
#define cfdpEofPDU_REQUIRED_BITS_FOR_ACN_ENCODING        72

flag cfdpEofPDU_ACN_Encode(const cfdpEofPDU* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_EOFPDU		62  /**/
#define ERR_ACN_DECODE_EOFPDU_CONDITION_CODE_2		35  /**/
#define ERR_ACN_DECODE_EOFPDU_SPARE		37  /**/
#define ERR_ACN_DECODE_EOFPDU_FILE_CHECKSUM_2		47  /**/
#define ERR_ACN_DECODE_EOFPDU_FILE_SIZE_2		57  /**/
flag cfdpEofPDU_ACN_Decode(cfdpEofPDU* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    AckTransactionStatus_undefined = 0,
    AckTransactionStatus_active = 1,
    AckTransactionStatus_terminated = 2,
    AckTransactionStatus_unrecognized = 3
} cfdpAckTransactionStatus;

// please use the following macros to avoid breaking code.
#define cfdpAckTransactionStatus_undefined AckTransactionStatus_undefined
#define cfdpAckTransactionStatus_active AckTransactionStatus_active
#define cfdpAckTransactionStatus_terminated AckTransactionStatus_terminated
#define cfdpAckTransactionStatus_unrecognized AckTransactionStatus_unrecognized

flag cfdpAckTransactionStatus_Equal(const cfdpAckTransactionStatus* pVal1, const cfdpAckTransactionStatus* pVal2);

#define ERR_ACKTRANSACTIONSTATUS		63  /*undefined | active | terminated | unrecognized*/
flag cfdpAckTransactionStatus_IsConstraintValid(const cfdpAckTransactionStatus* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpAckTransactionStatus cfdpAckTransactionStatus_constant;
#else
#define cfdpAckTransactionStatus_constant AckTransactionStatus_undefined
#endif

void cfdpAckTransactionStatus_Initialize(cfdpAckTransactionStatus* pVal);

#define ERR_UPER_ENCODE_ACKTRANSACTIONSTATUS		64  /**/
#define cfdpAckTransactionStatus_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpAckTransactionStatus_REQUIRED_BITS_FOR_ENCODING        2

flag cfdpAckTransactionStatus_Encode(const cfdpAckTransactionStatus* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ACKTRANSACTIONSTATUS		65  /**/
flag cfdpAckTransactionStatus_Decode(cfdpAckTransactionStatus* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_ACKTRANSACTIONSTATUS		66  /**/
#define cfdpAckTransactionStatus_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpAckTransactionStatus_REQUIRED_BITS_FOR_ACN_ENCODING        2

flag cfdpAckTransactionStatus_ACN_Encode(const cfdpAckTransactionStatus* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_ACKTRANSACTIONSTATUS		67  /**/
flag cfdpAckTransactionStatus_ACN_Decode(cfdpAckTransactionStatus* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- cfdpAckPDU --------------------------------------------*/
typedef struct {
    cfdpDirectiveCode directive_code_of_ack_pdu;
    cfdpDirectiveSubtypeCode directive_subtype_code;
    cfdpConditionCode condition_code;
    cfdpAckTransactionStatus transaction_status;

} cfdpAckPDU;

flag cfdpAckPDU_Equal(const cfdpAckPDU* pVal1, const cfdpAckPDU* pVal2);

#define ERR_ACKPDU		110  /**/
#define ERR_ACKPDU_DIRECTIVE_CODE_OF_ACK_PDU_2		73  /**/
#define ERR_ACKPDU_DIRECTIVE_SUBTYPE_CODE_2		83  /**/
#define ERR_ACKPDU_CONDITION_CODE_2		93  /**/
#define ERR_ACKPDU_TRANSACTION_STATUS_2		105  /**/
flag cfdpAckPDU_IsConstraintValid(const cfdpAckPDU* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpAckPDU cfdpAckPDU_constant;
#else
#define cfdpAckPDU_constant {.directive_code_of_ack_pdu = DirectiveCode_eof_pdu, .directive_subtype_code = DirectiveSubtypeCode_ack_others, .condition_code = ConditionCode_no_error, .transaction_status = AckTransactionStatus_undefined}
#endif

void cfdpAckPDU_Initialize(cfdpAckPDU* pVal);

#define ERR_UPER_ENCODE_ACKPDU		111  /**/
#define ERR_UPER_ENCODE_ACKPDU_DIRECTIVE_CODE_OF_ACK_PDU_2		74  /**/
#define ERR_UPER_ENCODE_ACKPDU_DIRECTIVE_SUBTYPE_CODE_2		84  /**/
#define ERR_UPER_ENCODE_ACKPDU_CONDITION_CODE_2		94  /**/
#define ERR_UPER_ENCODE_ACKPDU_TRANSACTION_STATUS_2		106  /**/
#define cfdpAckPDU_REQUIRED_BYTES_FOR_ENCODING       2
#define cfdpAckPDU_REQUIRED_BITS_FOR_ENCODING        10

flag cfdpAckPDU_Encode(const cfdpAckPDU* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ACKPDU		112  /**/
#define ERR_UPER_DECODE_ACKPDU_DIRECTIVE_CODE_OF_ACK_PDU_2		75  /**/
#define ERR_UPER_DECODE_ACKPDU_DIRECTIVE_SUBTYPE_CODE_2		85  /**/
#define ERR_UPER_DECODE_ACKPDU_CONDITION_CODE_2		95  /**/
#define ERR_UPER_DECODE_ACKPDU_TRANSACTION_STATUS_2		107  /**/
flag cfdpAckPDU_Decode(cfdpAckPDU* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_ACKPDU		113  /**/
#define ERR_ACN_ENCODE_ACKPDU_DIRECTIVE_CODE_OF_ACK_PDU_2		76  /**/
#define ERR_ACN_ENCODE_ACKPDU_DIRECTIVE_SUBTYPE_CODE_2		86  /**/
#define ERR_ACN_ENCODE_ACKPDU_CONDITION_CODE_2		96  /**/
#define ERR_ACN_ENCODE_ACKPDU_SPARE		98  /**/
#define ERR_ACN_ENCODE_ACKPDU_TRANSACTION_STATUS_2		108  /**/
#define cfdpAckPDU_REQUIRED_BYTES_FOR_ACN_ENCODING       3
#define cfdpAckPDU_REQUIRED_BITS_FOR_ACN_ENCODING        20

flag cfdpAckPDU_ACN_Encode(const cfdpAckPDU* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_ACKPDU		114  /**/
#define ERR_ACN_DECODE_ACKPDU_DIRECTIVE_CODE_OF_ACK_PDU_2		77  /**/
#define ERR_ACN_DECODE_ACKPDU_DIRECTIVE_SUBTYPE_CODE_2		87  /**/
#define ERR_ACN_DECODE_ACKPDU_CONDITION_CODE_2		97  /**/
#define ERR_ACN_DECODE_ACKPDU_SPARE		99  /**/
#define ERR_ACN_DECODE_ACKPDU_TRANSACTION_STATUS_2		109  /**/
flag cfdpAckPDU_ACN_Decode(cfdpAckPDU* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    DeliveryCode_data_complete = 0,
    DeliveryCode_data_incomplete = 1
} cfdpDeliveryCode;

// please use the following macros to avoid breaking code.
#define cfdpDeliveryCode_data_complete DeliveryCode_data_complete
#define cfdpDeliveryCode_data_incomplete DeliveryCode_data_incomplete

flag cfdpDeliveryCode_Equal(const cfdpDeliveryCode* pVal1, const cfdpDeliveryCode* pVal2);

#define ERR_DELIVERYCODE		115  /*data-complete | data-incomplete*/
flag cfdpDeliveryCode_IsConstraintValid(const cfdpDeliveryCode* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpDeliveryCode cfdpDeliveryCode_constant;
#else
#define cfdpDeliveryCode_constant DeliveryCode_data_complete
#endif

void cfdpDeliveryCode_Initialize(cfdpDeliveryCode* pVal);

#define ERR_UPER_ENCODE_DELIVERYCODE		116  /**/
#define cfdpDeliveryCode_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpDeliveryCode_REQUIRED_BITS_FOR_ENCODING        1

flag cfdpDeliveryCode_Encode(const cfdpDeliveryCode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DELIVERYCODE		117  /**/
flag cfdpDeliveryCode_Decode(cfdpDeliveryCode* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_DELIVERYCODE		118  /**/
#define cfdpDeliveryCode_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpDeliveryCode_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag cfdpDeliveryCode_ACN_Encode(const cfdpDeliveryCode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_DELIVERYCODE		119  /**/
flag cfdpDeliveryCode_ACN_Decode(cfdpDeliveryCode* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    ClosureRequested_requested = 0,
    ClosureRequested_not_requested = 1
} cfdpClosureRequested;

// please use the following macros to avoid breaking code.
#define cfdpClosureRequested_requested ClosureRequested_requested
#define cfdpClosureRequested_not_requested ClosureRequested_not_requested

flag cfdpClosureRequested_Equal(const cfdpClosureRequested* pVal1, const cfdpClosureRequested* pVal2);

#define ERR_CLOSUREREQUESTED		120  /*requested | not-requested*/
flag cfdpClosureRequested_IsConstraintValid(const cfdpClosureRequested* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpClosureRequested cfdpClosureRequested_constant;
#else
#define cfdpClosureRequested_constant ClosureRequested_requested
#endif

void cfdpClosureRequested_Initialize(cfdpClosureRequested* pVal);

#define ERR_UPER_ENCODE_CLOSUREREQUESTED		121  /**/
#define cfdpClosureRequested_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpClosureRequested_REQUIRED_BITS_FOR_ENCODING        1

flag cfdpClosureRequested_Encode(const cfdpClosureRequested* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_CLOSUREREQUESTED		122  /**/
flag cfdpClosureRequested_Decode(cfdpClosureRequested* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_CLOSUREREQUESTED		123  /**/
#define cfdpClosureRequested_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpClosureRequested_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag cfdpClosureRequested_ACN_Encode(const cfdpClosureRequested* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_CLOSUREREQUESTED		124  /**/
flag cfdpClosureRequested_ACN_Decode(cfdpClosureRequested* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint cfdpChecksumType;


flag cfdpChecksumType_Equal(const cfdpChecksumType* pVal1, const cfdpChecksumType* pVal2);

#define ERR_CHECKSUMTYPE		125  /*(0..15)*/
flag cfdpChecksumType_IsConstraintValid(const cfdpChecksumType* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpChecksumType cfdpChecksumType_constant;
#else
#define cfdpChecksumType_constant 0UL
#endif

void cfdpChecksumType_Initialize(cfdpChecksumType* pVal);

#define ERR_UPER_ENCODE_CHECKSUMTYPE		126  /**/
#define cfdpChecksumType_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpChecksumType_REQUIRED_BITS_FOR_ENCODING        4

flag cfdpChecksumType_Encode(const cfdpChecksumType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_CHECKSUMTYPE		127  /**/
flag cfdpChecksumType_Decode(cfdpChecksumType* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_CHECKSUMTYPE		128  /**/
#define cfdpChecksumType_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpChecksumType_REQUIRED_BITS_FOR_ACN_ENCODING        4

flag cfdpChecksumType_ACN_Encode(const cfdpChecksumType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_CHECKSUMTYPE		129  /**/
flag cfdpChecksumType_ACN_Decode(cfdpChecksumType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint cfdpFileNameSize;


flag cfdpFileNameSize_Equal(const cfdpFileNameSize* pVal1, const cfdpFileNameSize* pVal2);

#define ERR_FILENAMESIZE		130  /*(0..254)*/
flag cfdpFileNameSize_IsConstraintValid(const cfdpFileNameSize* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpFileNameSize cfdpFileNameSize_constant;
#else
#define cfdpFileNameSize_constant 0UL
#endif

void cfdpFileNameSize_Initialize(cfdpFileNameSize* pVal);

#define ERR_UPER_ENCODE_FILENAMESIZE		131  /**/
#define cfdpFileNameSize_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpFileNameSize_REQUIRED_BITS_FOR_ENCODING        8

flag cfdpFileNameSize_Encode(const cfdpFileNameSize* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_FILENAMESIZE		132  /**/
flag cfdpFileNameSize_Decode(cfdpFileNameSize* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_FILENAMESIZE		133  /**/
#define cfdpFileNameSize_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpFileNameSize_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag cfdpFileNameSize_ACN_Encode(const cfdpFileNameSize* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_FILENAMESIZE		134  /**/
flag cfdpFileNameSize_ACN_Decode(cfdpFileNameSize* pVal, BitStream* pBitStrm, int* pErrCode);
typedef struct {
    int nCount;
    byte arr[254];
} cfdpFileName;


flag cfdpFileName_Equal(const cfdpFileName* pVal1, const cfdpFileName* pVal2);

#define ERR_FILENAME		135  /*(SIZE(0..254))*/
flag cfdpFileName_IsConstraintValid(const cfdpFileName* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpFileName cfdpFileName_constant;
#else
#define cfdpFileName_constant {.nCount = 0, .arr  = {[0 ... 254-1] = 0 }}
#endif

void cfdpFileName_Initialize(cfdpFileName* pVal);

#define ERR_UPER_ENCODE_FILENAME		136  /**/
#define cfdpFileName_REQUIRED_BYTES_FOR_ENCODING       255
#define cfdpFileName_REQUIRED_BITS_FOR_ENCODING        2040

flag cfdpFileName_Encode(const cfdpFileName* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_FILENAME		137  /**/
flag cfdpFileName_Decode(cfdpFileName* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_FILENAME		138  /**/
#define cfdpFileName_REQUIRED_BYTES_FOR_ACN_ENCODING       255
#define cfdpFileName_REQUIRED_BITS_FOR_ACN_ENCODING        2040

flag cfdpFileName_ACN_Encode(const cfdpFileName* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_FILENAME		139  /**/
flag cfdpFileName_ACN_Decode(cfdpFileName* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- cfdpMetadataPDU --------------------------------------------*/
typedef struct {
    cfdpClosureRequested closure_requested;
    cfdpChecksumType checksum_type;
    cfdpFileSize file_size;
    cfdpFileName source_file_name;
    cfdpFileName destination_file_name;

} cfdpMetadataPDU;

flag cfdpMetadataPDU_Equal(const cfdpMetadataPDU* pVal1, const cfdpMetadataPDU* pVal2);

#define ERR_METADATAPDU		194  /**/
#define ERR_METADATAPDU_CLOSURE_REQUESTED_2		147  /**/
#define ERR_METADATAPDU_CHECKSUM_TYPE_2		159  /**/
#define ERR_METADATAPDU_FILE_SIZE_2		169  /**/
#define ERR_METADATAPDU_SOURCE_FILE_NAME_2		181  /**/
#define ERR_METADATAPDU_DESTINATION_FILE_NAME_2		191  /**/
flag cfdpMetadataPDU_IsConstraintValid(const cfdpMetadataPDU* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpMetadataPDU cfdpMetadataPDU_constant;
#else
#define cfdpMetadataPDU_constant {.closure_requested = ClosureRequested_requested, .checksum_type = 0UL, .file_size = 0UL, .source_file_name = {.nCount = 0, .arr  = {[0 ... 254-1] = 0 }}, .destination_file_name = {.nCount = 0, .arr  = {[0 ... 254-1] = 0 }}}
#endif

void cfdpMetadataPDU_Initialize(cfdpMetadataPDU* pVal);

#define ERR_UPER_ENCODE_METADATAPDU		195  /**/
#define ERR_UPER_ENCODE_METADATAPDU_CLOSURE_REQUESTED_2		148  /**/
#define ERR_UPER_ENCODE_METADATAPDU_CHECKSUM_TYPE_2		160  /**/
#define ERR_UPER_ENCODE_METADATAPDU_FILE_SIZE_2		170  /**/
#define ERR_UPER_ENCODE_METADATAPDU_SOURCE_FILE_NAME_2		182  /**/
#define ERR_UPER_ENCODE_METADATAPDU_DESTINATION_FILE_NAME_2		192  /**/
#define cfdpMetadataPDU_REQUIRED_BYTES_FOR_ENCODING       515
#define cfdpMetadataPDU_REQUIRED_BITS_FOR_ENCODING        4117

flag cfdpMetadataPDU_Encode(const cfdpMetadataPDU* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_METADATAPDU		196  /**/
#define ERR_UPER_DECODE_METADATAPDU_CLOSURE_REQUESTED_2		149  /**/
#define ERR_UPER_DECODE_METADATAPDU_CHECKSUM_TYPE_2		161  /**/
#define ERR_UPER_DECODE_METADATAPDU_FILE_SIZE_2		171  /**/
#define ERR_UPER_DECODE_METADATAPDU_SOURCE_FILE_NAME_2		183  /**/
#define ERR_UPER_DECODE_METADATAPDU_DESTINATION_FILE_NAME_2		193  /**/
flag cfdpMetadataPDU_Decode(cfdpMetadataPDU* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_METADATAPDU		197  /**/
#define ERR_ACN_ENCODE_METADATAPDU_RESERVED1		140  /**/
#define ERR_ACN_ENCODE_METADATAPDU_CLOSURE_REQUESTED_2		150  /**/
#define ERR_ACN_ENCODE_METADATAPDU_RESERVED2		152  /**/
#define ERR_ACN_ENCODE_METADATAPDU_CHECKSUM_TYPE_2		162  /**/
#define ERR_ACN_ENCODE_METADATAPDU_FILE_SIZE_2		172  /**/
#define ERR_ACN_ENCODE_METADATAPDU_SOURCE_FILE_NAME_SIZE_UNINITIALIZED		198  /**/
#define ERR_ACN_ENCODE_METADATAPDU_SOURCE_FILE_NAME_SIZE		174  /**/
#define ERR_ACN_ENCODE_METADATAPDU_SOURCE_FILE_NAME		179  /**/
#define ERR_ACN_ENCODE_METADATAPDU_DESTINATION_FILE_NAME_SIZE_UNINITIALIZED		199  /**/
#define ERR_ACN_ENCODE_METADATAPDU_DESTINATION_FILE_NAME_SIZE		184  /**/
#define ERR_ACN_ENCODE_METADATAPDU_DESTINATION_FILE_NAME		189  /**/
#define cfdpMetadataPDU_REQUIRED_BYTES_FOR_ACN_ENCODING       515
#define cfdpMetadataPDU_REQUIRED_BITS_FOR_ACN_ENCODING        4120

flag cfdpMetadataPDU_ACN_Encode(const cfdpMetadataPDU* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_METADATAPDU		200  /**/
#define ERR_ACN_DECODE_METADATAPDU_RESERVED1		141  /**/
#define ERR_ACN_DECODE_METADATAPDU_CLOSURE_REQUESTED_2		151  /**/
#define ERR_ACN_DECODE_METADATAPDU_RESERVED2		153  /**/
#define ERR_ACN_DECODE_METADATAPDU_CHECKSUM_TYPE_2		163  /**/
#define ERR_ACN_DECODE_METADATAPDU_FILE_SIZE_2		173  /**/
#define ERR_ACN_DECODE_METADATAPDU_SOURCE_FILE_NAME_SIZE		175  /**/
#define ERR_ACN_DECODE_METADATAPDU_SOURCE_FILE_NAME		180  /**/
#define ERR_ACN_DECODE_METADATAPDU_DESTINATION_FILE_NAME_SIZE		185  /**/
#define ERR_ACN_DECODE_METADATAPDU_DESTINATION_FILE_NAME		190  /**/
flag cfdpMetadataPDU_ACN_Decode(cfdpMetadataPDU* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    FileStatus_discarted_deliberately = 0,
    FileStatus_discarted_file_rejection = 1,
    FileStatus_retained_successfully = 2,
    FileStatus_unreported = 3
} cfdpFileStatus;

// please use the following macros to avoid breaking code.
#define cfdpFileStatus_discarted_deliberately FileStatus_discarted_deliberately
#define cfdpFileStatus_discarted_file_rejection FileStatus_discarted_file_rejection
#define cfdpFileStatus_retained_successfully FileStatus_retained_successfully
#define cfdpFileStatus_unreported FileStatus_unreported

flag cfdpFileStatus_Equal(const cfdpFileStatus* pVal1, const cfdpFileStatus* pVal2);

#define ERR_FILESTATUS		201  /*discarted-deliberately | discarted-file-rejection | retained-successfully | unreported*/
flag cfdpFileStatus_IsConstraintValid(const cfdpFileStatus* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpFileStatus cfdpFileStatus_constant;
#else
#define cfdpFileStatus_constant FileStatus_discarted_deliberately
#endif

void cfdpFileStatus_Initialize(cfdpFileStatus* pVal);

#define ERR_UPER_ENCODE_FILESTATUS		202  /**/
#define cfdpFileStatus_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpFileStatus_REQUIRED_BITS_FOR_ENCODING        2

flag cfdpFileStatus_Encode(const cfdpFileStatus* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_FILESTATUS		203  /**/
flag cfdpFileStatus_Decode(cfdpFileStatus* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_FILESTATUS		204  /**/
#define cfdpFileStatus_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpFileStatus_REQUIRED_BITS_FOR_ACN_ENCODING        2

flag cfdpFileStatus_ACN_Encode(const cfdpFileStatus* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_FILESTATUS		205  /**/
flag cfdpFileStatus_ACN_Decode(cfdpFileStatus* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- cfdpFinishedPDU --------------------------------------------*/
typedef struct {
    cfdpConditionCode condition_code;
    cfdpDeliveryCode delivery_code;
    cfdpFileStatus file_status;

} cfdpFinishedPDU;

flag cfdpFinishedPDU_Equal(const cfdpFinishedPDU* pVal1, const cfdpFinishedPDU* pVal2);

#define ERR_FINISHEDPDU		238  /**/
#define ERR_FINISHEDPDU_CONDITION_CODE_2		211  /**/
#define ERR_FINISHEDPDU_DELIVERY_CODE_2		223  /**/
#define ERR_FINISHEDPDU_FILE_STATUS_2		233  /**/
flag cfdpFinishedPDU_IsConstraintValid(const cfdpFinishedPDU* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpFinishedPDU cfdpFinishedPDU_constant;
#else
#define cfdpFinishedPDU_constant {.condition_code = ConditionCode_no_error, .delivery_code = DeliveryCode_data_complete, .file_status = FileStatus_discarted_deliberately}
#endif

void cfdpFinishedPDU_Initialize(cfdpFinishedPDU* pVal);

#define ERR_UPER_ENCODE_FINISHEDPDU		239  /**/
#define ERR_UPER_ENCODE_FINISHEDPDU_CONDITION_CODE_2		212  /**/
#define ERR_UPER_ENCODE_FINISHEDPDU_DELIVERY_CODE_2		224  /**/
#define ERR_UPER_ENCODE_FINISHEDPDU_FILE_STATUS_2		234  /**/
#define cfdpFinishedPDU_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpFinishedPDU_REQUIRED_BITS_FOR_ENCODING        7

flag cfdpFinishedPDU_Encode(const cfdpFinishedPDU* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_FINISHEDPDU		240  /**/
#define ERR_UPER_DECODE_FINISHEDPDU_CONDITION_CODE_2		213  /**/
#define ERR_UPER_DECODE_FINISHEDPDU_DELIVERY_CODE_2		225  /**/
#define ERR_UPER_DECODE_FINISHEDPDU_FILE_STATUS_2		235  /**/
flag cfdpFinishedPDU_Decode(cfdpFinishedPDU* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_FINISHEDPDU		241  /**/
#define ERR_ACN_ENCODE_FINISHEDPDU_CONDITION_CODE_2		214  /**/
#define ERR_ACN_ENCODE_FINISHEDPDU_END_SYSTEM_STATUS		216  /**/
#define ERR_ACN_ENCODE_FINISHEDPDU_DELIVERY_CODE_2		226  /**/
#define ERR_ACN_ENCODE_FINISHEDPDU_FILE_STATUS_2		236  /**/
#define cfdpFinishedPDU_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpFinishedPDU_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag cfdpFinishedPDU_ACN_Encode(const cfdpFinishedPDU* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_FINISHEDPDU		242  /**/
#define ERR_ACN_DECODE_FINISHEDPDU_CONDITION_CODE_2		215  /**/
#define ERR_ACN_DECODE_FINISHEDPDU_END_SYSTEM_STATUS		217  /**/
#define ERR_ACN_DECODE_FINISHEDPDU_DELIVERY_CODE_2		227  /**/
#define ERR_ACN_DECODE_FINISHEDPDU_FILE_STATUS_2		237  /**/
flag cfdpFinishedPDU_ACN_Decode(cfdpFinishedPDU* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    TransactionStatus_discarted_deliberately = 0,
    TransactionStatus_discarted_file_rejection = 1,
    TransactionStatus_retained_successfully = 2,
    TransactionStatus_unreported = 3
} cfdpTransactionStatus;

// please use the following macros to avoid breaking code.
#define cfdpTransactionStatus_discarted_deliberately TransactionStatus_discarted_deliberately
#define cfdpTransactionStatus_discarted_file_rejection TransactionStatus_discarted_file_rejection
#define cfdpTransactionStatus_retained_successfully TransactionStatus_retained_successfully
#define cfdpTransactionStatus_unreported TransactionStatus_unreported

flag cfdpTransactionStatus_Equal(const cfdpTransactionStatus* pVal1, const cfdpTransactionStatus* pVal2);

#define ERR_TRANSACTIONSTATUS		243  /*discarted-deliberately | discarted-file-rejection | retained-successfully | unreported*/
flag cfdpTransactionStatus_IsConstraintValid(const cfdpTransactionStatus* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpTransactionStatus cfdpTransactionStatus_constant;
#else
#define cfdpTransactionStatus_constant TransactionStatus_discarted_deliberately
#endif

void cfdpTransactionStatus_Initialize(cfdpTransactionStatus* pVal);

#define ERR_UPER_ENCODE_TRANSACTIONSTATUS		244  /**/
#define cfdpTransactionStatus_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpTransactionStatus_REQUIRED_BITS_FOR_ENCODING        2

flag cfdpTransactionStatus_Encode(const cfdpTransactionStatus* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TRANSACTIONSTATUS		245  /**/
flag cfdpTransactionStatus_Decode(cfdpTransactionStatus* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TRANSACTIONSTATUS		246  /**/
#define cfdpTransactionStatus_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpTransactionStatus_REQUIRED_BITS_FOR_ACN_ENCODING        2

flag cfdpTransactionStatus_ACN_Encode(const cfdpTransactionStatus* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TRANSACTIONSTATUS		247  /**/
flag cfdpTransactionStatus_ACN_Decode(cfdpTransactionStatus* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    TypeFieldCode_filestore_request = 0,
    TypeFieldCode_filestore_response = 1,
    TypeFieldCode_message_to_user = 2,
    TypeFieldCode_fault_handler_overrides = 4,
    TypeFieldCode_flow_label = 5,
    TypeFieldCode_entity_id = 6
} cfdpTypeFieldCode;

// please use the following macros to avoid breaking code.
#define cfdpTypeFieldCode_filestore_request TypeFieldCode_filestore_request
#define cfdpTypeFieldCode_filestore_response TypeFieldCode_filestore_response
#define cfdpTypeFieldCode_message_to_user TypeFieldCode_message_to_user
#define cfdpTypeFieldCode_fault_handler_overrides TypeFieldCode_fault_handler_overrides
#define cfdpTypeFieldCode_flow_label TypeFieldCode_flow_label
#define cfdpTypeFieldCode_entity_id TypeFieldCode_entity_id

flag cfdpTypeFieldCode_Equal(const cfdpTypeFieldCode* pVal1, const cfdpTypeFieldCode* pVal2);

#define ERR_TYPEFIELDCODE		248  /*filestore-request | filestore-response | message-to-user | fault-handler-overrides | flow-label | entity-id*/
flag cfdpTypeFieldCode_IsConstraintValid(const cfdpTypeFieldCode* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpTypeFieldCode cfdpTypeFieldCode_constant;
#else
#define cfdpTypeFieldCode_constant TypeFieldCode_filestore_request
#endif

void cfdpTypeFieldCode_Initialize(cfdpTypeFieldCode* pVal);

#define ERR_UPER_ENCODE_TYPEFIELDCODE		249  /**/
#define cfdpTypeFieldCode_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpTypeFieldCode_REQUIRED_BITS_FOR_ENCODING        3

flag cfdpTypeFieldCode_Encode(const cfdpTypeFieldCode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TYPEFIELDCODE		250  /**/
flag cfdpTypeFieldCode_Decode(cfdpTypeFieldCode* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TYPEFIELDCODE		251  /**/
#define cfdpTypeFieldCode_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpTypeFieldCode_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag cfdpTypeFieldCode_ACN_Encode(const cfdpTypeFieldCode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TYPEFIELDCODE		252  /**/
flag cfdpTypeFieldCode_ACN_Decode(cfdpTypeFieldCode* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    MessageType_proxy_put_request = 0,
    MessageType_proxy_message_to_user = 1,
    MessageType_proxy_filestore_request = 2,
    MessageType_proxy_fault_handler_override = 3,
    MessageType_proxy_transmission_mode = 4,
    MessageType_proxy_flow_label = 5,
    MessageType_proxy_segmentation_control = 6,
    MessageType_proxy_put_response = 7,
    MessageType_proxy_filestore_response = 8,
    MessageType_proxy_put_cancel = 9,
    MessageType_directory_listing_request = 16,
    MessageType_directory_listing_response = 17,
    MessageType_remote_status_report_request = 32,
    MessageType_remote_status_report_response = 33,
    MessageType_remote_suspend_request = 48,
    MessageType_remote_suspend_response = 49,
    MessageType_remote_resume_request = 56,
    MessageType_remote_resume_response = 57
} cfdpMessageType;

// please use the following macros to avoid breaking code.
#define cfdpMessageType_proxy_put_request MessageType_proxy_put_request
#define cfdpMessageType_proxy_message_to_user MessageType_proxy_message_to_user
#define cfdpMessageType_proxy_filestore_request MessageType_proxy_filestore_request
#define cfdpMessageType_proxy_fault_handler_override MessageType_proxy_fault_handler_override
#define cfdpMessageType_proxy_transmission_mode MessageType_proxy_transmission_mode
#define cfdpMessageType_proxy_flow_label MessageType_proxy_flow_label
#define cfdpMessageType_proxy_segmentation_control MessageType_proxy_segmentation_control
#define cfdpMessageType_proxy_put_response MessageType_proxy_put_response
#define cfdpMessageType_proxy_filestore_response MessageType_proxy_filestore_response
#define cfdpMessageType_proxy_put_cancel MessageType_proxy_put_cancel
#define cfdpMessageType_directory_listing_request MessageType_directory_listing_request
#define cfdpMessageType_directory_listing_response MessageType_directory_listing_response
#define cfdpMessageType_remote_status_report_request MessageType_remote_status_report_request
#define cfdpMessageType_remote_status_report_response MessageType_remote_status_report_response
#define cfdpMessageType_remote_suspend_request MessageType_remote_suspend_request
#define cfdpMessageType_remote_suspend_response MessageType_remote_suspend_response
#define cfdpMessageType_remote_resume_request MessageType_remote_resume_request
#define cfdpMessageType_remote_resume_response MessageType_remote_resume_response

flag cfdpMessageType_Equal(const cfdpMessageType* pVal1, const cfdpMessageType* pVal2);

#define ERR_MESSAGETYPE		253  /*proxy-put-request | proxy-message-to-user | proxy-filestore-request | proxy-fault-handler-override | proxy-transmission-mode | proxy-flow-label | proxy-segmentation-control | proxy-put-response | proxy-filestore-response | proxy-put-cancel | directory-listing-request | directory-listing-response | remote-status-report-request | remote-status-report-response | remote-suspend-request | remote-suspend-response | remote-resume-request | remote-resume-response*/
flag cfdpMessageType_IsConstraintValid(const cfdpMessageType* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpMessageType cfdpMessageType_constant;
#else
#define cfdpMessageType_constant MessageType_proxy_put_request
#endif

void cfdpMessageType_Initialize(cfdpMessageType* pVal);

#define ERR_UPER_ENCODE_MESSAGETYPE		254  /**/
#define cfdpMessageType_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpMessageType_REQUIRED_BITS_FOR_ENCODING        5

flag cfdpMessageType_Encode(const cfdpMessageType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MESSAGETYPE		255  /**/
flag cfdpMessageType_Decode(cfdpMessageType* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MESSAGETYPE		256  /**/
#define cfdpMessageType_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpMessageType_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag cfdpMessageType_ACN_Encode(const cfdpMessageType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MESSAGETYPE		257  /**/
flag cfdpMessageType_ACN_Decode(cfdpMessageType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint cfdpProtocolVersion;


flag cfdpProtocolVersion_Equal(const cfdpProtocolVersion* pVal1, const cfdpProtocolVersion* pVal2);

#define ERR_PROTOCOLVERSION		258  /*(0 .. 7)*/
flag cfdpProtocolVersion_IsConstraintValid(const cfdpProtocolVersion* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpProtocolVersion cfdpProtocolVersion_constant;
#else
#define cfdpProtocolVersion_constant 0UL
#endif

void cfdpProtocolVersion_Initialize(cfdpProtocolVersion* pVal);

#define ERR_UPER_ENCODE_PROTOCOLVERSION		259  /**/
#define cfdpProtocolVersion_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpProtocolVersion_REQUIRED_BITS_FOR_ENCODING        3

flag cfdpProtocolVersion_Encode(const cfdpProtocolVersion* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PROTOCOLVERSION		260  /**/
flag cfdpProtocolVersion_Decode(cfdpProtocolVersion* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PROTOCOLVERSION		261  /**/
#define cfdpProtocolVersion_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpProtocolVersion_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag cfdpProtocolVersion_ACN_Encode(const cfdpProtocolVersion* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PROTOCOLVERSION		262  /**/
flag cfdpProtocolVersion_ACN_Decode(cfdpProtocolVersion* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    PDUType_file_directive = 0,
    PDUType_file_data = 1
} cfdpPDUType;

// please use the following macros to avoid breaking code.
#define cfdpPDUType_file_directive PDUType_file_directive
#define cfdpPDUType_file_data PDUType_file_data

flag cfdpPDUType_Equal(const cfdpPDUType* pVal1, const cfdpPDUType* pVal2);

#define ERR_PDUTYPE		263  /*file-directive | file-data*/
flag cfdpPDUType_IsConstraintValid(const cfdpPDUType* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpPDUType cfdpPDUType_constant;
#else
#define cfdpPDUType_constant PDUType_file_directive
#endif

void cfdpPDUType_Initialize(cfdpPDUType* pVal);

#define ERR_UPER_ENCODE_PDUTYPE		264  /**/
#define cfdpPDUType_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpPDUType_REQUIRED_BITS_FOR_ENCODING        1

flag cfdpPDUType_Encode(const cfdpPDUType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PDUTYPE		265  /**/
flag cfdpPDUType_Decode(cfdpPDUType* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PDUTYPE		266  /**/
#define cfdpPDUType_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpPDUType_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag cfdpPDUType_ACN_Encode(const cfdpPDUType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PDUTYPE		267  /**/
flag cfdpPDUType_ACN_Decode(cfdpPDUType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    Direction_toward_receiver = 0,
    Direction_toward_sender = 1
} cfdpDirection;

// please use the following macros to avoid breaking code.
#define cfdpDirection_toward_receiver Direction_toward_receiver
#define cfdpDirection_toward_sender Direction_toward_sender

flag cfdpDirection_Equal(const cfdpDirection* pVal1, const cfdpDirection* pVal2);

#define ERR_DIRECTION		268  /*toward-receiver | toward-sender*/
flag cfdpDirection_IsConstraintValid(const cfdpDirection* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpDirection cfdpDirection_constant;
#else
#define cfdpDirection_constant Direction_toward_receiver
#endif

void cfdpDirection_Initialize(cfdpDirection* pVal);

#define ERR_UPER_ENCODE_DIRECTION		269  /**/
#define cfdpDirection_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpDirection_REQUIRED_BITS_FOR_ENCODING        1

flag cfdpDirection_Encode(const cfdpDirection* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DIRECTION		270  /**/
flag cfdpDirection_Decode(cfdpDirection* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_DIRECTION		271  /**/
#define cfdpDirection_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpDirection_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag cfdpDirection_ACN_Encode(const cfdpDirection* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_DIRECTION		272  /**/
flag cfdpDirection_ACN_Decode(cfdpDirection* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    TransmissionMode_acknowledged = 0,
    TransmissionMode_unacknowledged = 1
} cfdpTransmissionMode;

// please use the following macros to avoid breaking code.
#define cfdpTransmissionMode_acknowledged TransmissionMode_acknowledged
#define cfdpTransmissionMode_unacknowledged TransmissionMode_unacknowledged

flag cfdpTransmissionMode_Equal(const cfdpTransmissionMode* pVal1, const cfdpTransmissionMode* pVal2);

#define ERR_TRANSMISSIONMODE		273  /*acknowledged | unacknowledged*/
flag cfdpTransmissionMode_IsConstraintValid(const cfdpTransmissionMode* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpTransmissionMode cfdpTransmissionMode_constant;
#else
#define cfdpTransmissionMode_constant TransmissionMode_acknowledged
#endif

void cfdpTransmissionMode_Initialize(cfdpTransmissionMode* pVal);

#define ERR_UPER_ENCODE_TRANSMISSIONMODE		274  /**/
#define cfdpTransmissionMode_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpTransmissionMode_REQUIRED_BITS_FOR_ENCODING        1

flag cfdpTransmissionMode_Encode(const cfdpTransmissionMode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TRANSMISSIONMODE		275  /**/
flag cfdpTransmissionMode_Decode(cfdpTransmissionMode* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TRANSMISSIONMODE		276  /**/
#define cfdpTransmissionMode_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpTransmissionMode_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag cfdpTransmissionMode_ACN_Encode(const cfdpTransmissionMode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TRANSMISSIONMODE		277  /**/
flag cfdpTransmissionMode_ACN_Decode(cfdpTransmissionMode* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    CRCFlag_crc_not_present = 0,
    CRCFlag_crc_present = 1
} cfdpCRCFlag;

// please use the following macros to avoid breaking code.
#define cfdpCRCFlag_crc_not_present CRCFlag_crc_not_present
#define cfdpCRCFlag_crc_present CRCFlag_crc_present

flag cfdpCRCFlag_Equal(const cfdpCRCFlag* pVal1, const cfdpCRCFlag* pVal2);

#define ERR_CRCFLAG		278  /*crc-not-present | crc-present*/
flag cfdpCRCFlag_IsConstraintValid(const cfdpCRCFlag* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpCRCFlag cfdpCRCFlag_constant;
#else
#define cfdpCRCFlag_constant CRCFlag_crc_not_present
#endif

void cfdpCRCFlag_Initialize(cfdpCRCFlag* pVal);

#define ERR_UPER_ENCODE_CRCFLAG		279  /**/
#define cfdpCRCFlag_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpCRCFlag_REQUIRED_BITS_FOR_ENCODING        1

flag cfdpCRCFlag_Encode(const cfdpCRCFlag* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_CRCFLAG		280  /**/
flag cfdpCRCFlag_Decode(cfdpCRCFlag* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_CRCFLAG		281  /**/
#define cfdpCRCFlag_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpCRCFlag_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag cfdpCRCFlag_ACN_Encode(const cfdpCRCFlag* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_CRCFLAG		282  /**/
flag cfdpCRCFlag_ACN_Decode(cfdpCRCFlag* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint cfdpLargeFileFlag;


flag cfdpLargeFileFlag_Equal(const cfdpLargeFileFlag* pVal1, const cfdpLargeFileFlag* pVal2);

#define ERR_LARGEFILEFLAG		283  /*(0..1)*/
flag cfdpLargeFileFlag_IsConstraintValid(const cfdpLargeFileFlag* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpLargeFileFlag cfdpLargeFileFlag_constant;
#else
#define cfdpLargeFileFlag_constant 0UL
#endif

void cfdpLargeFileFlag_Initialize(cfdpLargeFileFlag* pVal);

#define ERR_UPER_ENCODE_LARGEFILEFLAG		284  /**/
#define cfdpLargeFileFlag_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpLargeFileFlag_REQUIRED_BITS_FOR_ENCODING        1

flag cfdpLargeFileFlag_Encode(const cfdpLargeFileFlag* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_LARGEFILEFLAG		285  /**/
flag cfdpLargeFileFlag_Decode(cfdpLargeFileFlag* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_LARGEFILEFLAG		286  /**/
#define cfdpLargeFileFlag_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpLargeFileFlag_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag cfdpLargeFileFlag_ACN_Encode(const cfdpLargeFileFlag* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_LARGEFILEFLAG		287  /**/
flag cfdpLargeFileFlag_ACN_Decode(cfdpLargeFileFlag* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint cfdpPDUDataFieldLength;


flag cfdpPDUDataFieldLength_Equal(const cfdpPDUDataFieldLength* pVal1, const cfdpPDUDataFieldLength* pVal2);

#define ERR_PDUDATAFIELDLENGTH		288  /*(0 .. 65535)*/
flag cfdpPDUDataFieldLength_IsConstraintValid(const cfdpPDUDataFieldLength* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpPDUDataFieldLength cfdpPDUDataFieldLength_constant;
#else
#define cfdpPDUDataFieldLength_constant 0UL
#endif

void cfdpPDUDataFieldLength_Initialize(cfdpPDUDataFieldLength* pVal);

#define ERR_UPER_ENCODE_PDUDATAFIELDLENGTH		289  /**/
#define cfdpPDUDataFieldLength_REQUIRED_BYTES_FOR_ENCODING       2
#define cfdpPDUDataFieldLength_REQUIRED_BITS_FOR_ENCODING        16

flag cfdpPDUDataFieldLength_Encode(const cfdpPDUDataFieldLength* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PDUDATAFIELDLENGTH		290  /**/
flag cfdpPDUDataFieldLength_Decode(cfdpPDUDataFieldLength* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PDUDATAFIELDLENGTH		291  /**/
#define cfdpPDUDataFieldLength_REQUIRED_BYTES_FOR_ACN_ENCODING       2
#define cfdpPDUDataFieldLength_REQUIRED_BITS_FOR_ACN_ENCODING        16

flag cfdpPDUDataFieldLength_ACN_Encode(const cfdpPDUDataFieldLength* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PDUDATAFIELDLENGTH		292  /**/
flag cfdpPDUDataFieldLength_ACN_Decode(cfdpPDUDataFieldLength* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    SegmentationControl_record_boundries_not_preserved = 0,
    SegmentationControl_record_boundries_preserved = 1
} cfdpSegmentationControl;

// please use the following macros to avoid breaking code.
#define cfdpSegmentationControl_record_boundries_not_preserved SegmentationControl_record_boundries_not_preserved
#define cfdpSegmentationControl_record_boundries_preserved SegmentationControl_record_boundries_preserved

flag cfdpSegmentationControl_Equal(const cfdpSegmentationControl* pVal1, const cfdpSegmentationControl* pVal2);

#define ERR_SEGMENTATIONCONTROL		293  /*record-boundries-not-preserved | record-boundries-preserved*/
flag cfdpSegmentationControl_IsConstraintValid(const cfdpSegmentationControl* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpSegmentationControl cfdpSegmentationControl_constant;
#else
#define cfdpSegmentationControl_constant SegmentationControl_record_boundries_not_preserved
#endif

void cfdpSegmentationControl_Initialize(cfdpSegmentationControl* pVal);

#define ERR_UPER_ENCODE_SEGMENTATIONCONTROL		294  /**/
#define cfdpSegmentationControl_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpSegmentationControl_REQUIRED_BITS_FOR_ENCODING        1

flag cfdpSegmentationControl_Encode(const cfdpSegmentationControl* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SEGMENTATIONCONTROL		295  /**/
flag cfdpSegmentationControl_Decode(cfdpSegmentationControl* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_SEGMENTATIONCONTROL		296  /**/
#define cfdpSegmentationControl_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpSegmentationControl_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag cfdpSegmentationControl_ACN_Encode(const cfdpSegmentationControl* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_SEGMENTATIONCONTROL		297  /**/
flag cfdpSegmentationControl_ACN_Decode(cfdpSegmentationControl* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint cfdpLengthOfEntityIds;


flag cfdpLengthOfEntityIds_Equal(const cfdpLengthOfEntityIds* pVal1, const cfdpLengthOfEntityIds* pVal2);

#define ERR_LENGTHOFENTITYIDS		298  /*(0 .. 7)*/
flag cfdpLengthOfEntityIds_IsConstraintValid(const cfdpLengthOfEntityIds* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpLengthOfEntityIds cfdpLengthOfEntityIds_constant;
#else
#define cfdpLengthOfEntityIds_constant 0UL
#endif

void cfdpLengthOfEntityIds_Initialize(cfdpLengthOfEntityIds* pVal);

#define ERR_UPER_ENCODE_LENGTHOFENTITYIDS		299  /**/
#define cfdpLengthOfEntityIds_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpLengthOfEntityIds_REQUIRED_BITS_FOR_ENCODING        3

flag cfdpLengthOfEntityIds_Encode(const cfdpLengthOfEntityIds* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_LENGTHOFENTITYIDS		300  /**/
flag cfdpLengthOfEntityIds_Decode(cfdpLengthOfEntityIds* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_LENGTHOFENTITYIDS		301  /**/
#define cfdpLengthOfEntityIds_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpLengthOfEntityIds_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag cfdpLengthOfEntityIds_ACN_Encode(const cfdpLengthOfEntityIds* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_LENGTHOFENTITYIDS		302  /**/
flag cfdpLengthOfEntityIds_ACN_Decode(cfdpLengthOfEntityIds* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    SegmentMetadataFlag_flag_present = 0,
    SegmentMetadataFlag_flag_not_present = 1
} cfdpSegmentMetadataFlag;

// please use the following macros to avoid breaking code.
#define cfdpSegmentMetadataFlag_flag_present SegmentMetadataFlag_flag_present
#define cfdpSegmentMetadataFlag_flag_not_present SegmentMetadataFlag_flag_not_present

flag cfdpSegmentMetadataFlag_Equal(const cfdpSegmentMetadataFlag* pVal1, const cfdpSegmentMetadataFlag* pVal2);

#define ERR_SEGMENTMETADATAFLAG		303  /*flag-present | flag-not-present*/
flag cfdpSegmentMetadataFlag_IsConstraintValid(const cfdpSegmentMetadataFlag* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpSegmentMetadataFlag cfdpSegmentMetadataFlag_constant;
#else
#define cfdpSegmentMetadataFlag_constant SegmentMetadataFlag_flag_present
#endif

void cfdpSegmentMetadataFlag_Initialize(cfdpSegmentMetadataFlag* pVal);

#define ERR_UPER_ENCODE_SEGMENTMETADATAFLAG		304  /**/
#define cfdpSegmentMetadataFlag_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpSegmentMetadataFlag_REQUIRED_BITS_FOR_ENCODING        1

flag cfdpSegmentMetadataFlag_Encode(const cfdpSegmentMetadataFlag* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SEGMENTMETADATAFLAG		305  /**/
flag cfdpSegmentMetadataFlag_Decode(cfdpSegmentMetadataFlag* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_SEGMENTMETADATAFLAG		306  /**/
#define cfdpSegmentMetadataFlag_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpSegmentMetadataFlag_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag cfdpSegmentMetadataFlag_ACN_Encode(const cfdpSegmentMetadataFlag* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_SEGMENTMETADATAFLAG		307  /**/
flag cfdpSegmentMetadataFlag_ACN_Decode(cfdpSegmentMetadataFlag* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint cfdpLengthOfTransactionSequenceNumber;


flag cfdpLengthOfTransactionSequenceNumber_Equal(const cfdpLengthOfTransactionSequenceNumber* pVal1, const cfdpLengthOfTransactionSequenceNumber* pVal2);

#define ERR_LENGTHOFTRANSACTIONSEQUENCENUMBER		308  /*(0 .. 7)*/
flag cfdpLengthOfTransactionSequenceNumber_IsConstraintValid(const cfdpLengthOfTransactionSequenceNumber* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpLengthOfTransactionSequenceNumber cfdpLengthOfTransactionSequenceNumber_constant;
#else
#define cfdpLengthOfTransactionSequenceNumber_constant 0UL
#endif

void cfdpLengthOfTransactionSequenceNumber_Initialize(cfdpLengthOfTransactionSequenceNumber* pVal);

#define ERR_UPER_ENCODE_LENGTHOFTRANSACTIONSEQUENCENUMBER		309  /**/
#define cfdpLengthOfTransactionSequenceNumber_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpLengthOfTransactionSequenceNumber_REQUIRED_BITS_FOR_ENCODING        3

flag cfdpLengthOfTransactionSequenceNumber_Encode(const cfdpLengthOfTransactionSequenceNumber* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_LENGTHOFTRANSACTIONSEQUENCENUMBER		310  /**/
flag cfdpLengthOfTransactionSequenceNumber_Decode(cfdpLengthOfTransactionSequenceNumber* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_LENGTHOFTRANSACTIONSEQUENCENUMBER		311  /**/
#define cfdpLengthOfTransactionSequenceNumber_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpLengthOfTransactionSequenceNumber_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag cfdpLengthOfTransactionSequenceNumber_ACN_Encode(const cfdpLengthOfTransactionSequenceNumber* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_LENGTHOFTRANSACTIONSEQUENCENUMBER		312  /**/
flag cfdpLengthOfTransactionSequenceNumber_ACN_Decode(cfdpLengthOfTransactionSequenceNumber* pVal, BitStream* pBitStrm, int* pErrCode);
typedef struct {
    int nCount;
    byte arr[7];
} cfdpEntityId;


flag cfdpEntityId_Equal(const cfdpEntityId* pVal1, const cfdpEntityId* pVal2);

#define ERR_ENTITYID		313  /*(SIZE(1..7))*/
flag cfdpEntityId_IsConstraintValid(const cfdpEntityId* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpEntityId cfdpEntityId_constant;
#else
#define cfdpEntityId_constant {.nCount = 1, .arr  = {[0 ... 7-1] = 0 }}
#endif

void cfdpEntityId_Initialize(cfdpEntityId* pVal);

#define ERR_UPER_ENCODE_ENTITYID		314  /**/
#define cfdpEntityId_REQUIRED_BYTES_FOR_ENCODING       8
#define cfdpEntityId_REQUIRED_BITS_FOR_ENCODING        59

flag cfdpEntityId_Encode(const cfdpEntityId* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ENTITYID		315  /**/
flag cfdpEntityId_Decode(cfdpEntityId* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_ENTITYID		316  /**/
#define cfdpEntityId_REQUIRED_BYTES_FOR_ACN_ENCODING       8
#define cfdpEntityId_REQUIRED_BITS_FOR_ACN_ENCODING        59

flag cfdpEntityId_ACN_Encode(const cfdpEntityId* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_ENTITYID		317  /**/
flag cfdpEntityId_ACN_Decode(cfdpEntityId* pVal, BitStream* pBitStrm, int* pErrCode);
typedef struct {
    int nCount;
    byte arr[7];
} cfdpTransactionSequenceNumber;


flag cfdpTransactionSequenceNumber_Equal(const cfdpTransactionSequenceNumber* pVal1, const cfdpTransactionSequenceNumber* pVal2);

#define ERR_TRANSACTIONSEQUENCENUMBER		318  /*(SIZE(1..7))*/
flag cfdpTransactionSequenceNumber_IsConstraintValid(const cfdpTransactionSequenceNumber* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpTransactionSequenceNumber cfdpTransactionSequenceNumber_constant;
#else
#define cfdpTransactionSequenceNumber_constant {.nCount = 1, .arr  = {[0 ... 7-1] = 0 }}
#endif

void cfdpTransactionSequenceNumber_Initialize(cfdpTransactionSequenceNumber* pVal);

#define ERR_UPER_ENCODE_TRANSACTIONSEQUENCENUMBER		319  /**/
#define cfdpTransactionSequenceNumber_REQUIRED_BYTES_FOR_ENCODING       8
#define cfdpTransactionSequenceNumber_REQUIRED_BITS_FOR_ENCODING        59

flag cfdpTransactionSequenceNumber_Encode(const cfdpTransactionSequenceNumber* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TRANSACTIONSEQUENCENUMBER		320  /**/
flag cfdpTransactionSequenceNumber_Decode(cfdpTransactionSequenceNumber* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TRANSACTIONSEQUENCENUMBER		321  /**/
#define cfdpTransactionSequenceNumber_REQUIRED_BYTES_FOR_ACN_ENCODING       8
#define cfdpTransactionSequenceNumber_REQUIRED_BITS_FOR_ACN_ENCODING        59

flag cfdpTransactionSequenceNumber_ACN_Encode(const cfdpTransactionSequenceNumber* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TRANSACTIONSEQUENCENUMBER		322  /**/
flag cfdpTransactionSequenceNumber_ACN_Decode(cfdpTransactionSequenceNumber* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- cfdpPDUHeader --------------------------------------------*/
typedef struct {
    cfdpProtocolVersion version;
    cfdpPDUType pdu_type;
    cfdpDirection direction;
    cfdpTransmissionMode transmission_mode;
    cfdpCRCFlag crc_flag;
    cfdpLargeFileFlag large_file_flag;
    cfdpPDUDataFieldLength pdu_data_field_length;
    cfdpSegmentationControl segmentation_control;
    cfdpSegmentMetadataFlag segment_metadata_flag;
    cfdpEntityId source_entity_id;
    cfdpTransactionSequenceNumber transaction_sequence_number;
    cfdpEntityId destination_entity_id;

} cfdpPDUHeader;

flag cfdpPDUHeader_Equal(const cfdpPDUHeader* pVal1, const cfdpPDUHeader* pVal2);

#define ERR_PDUHEADER		442  /**/
#define ERR_PDUHEADER_VERSION_2		328  /**/
#define ERR_PDUHEADER_PDU_TYPE_2		338  /**/
#define ERR_PDUHEADER_DIRECTION_2		348  /**/
#define ERR_PDUHEADER_TRANSMISSION_MODE_2		358  /**/
#define ERR_PDUHEADER_CRC_FLAG_2		368  /**/
#define ERR_PDUHEADER_LARGE_FILE_FLAG_2		378  /**/
#define ERR_PDUHEADER_PDU_DATA_FIELD_LENGTH_2		388  /**/
#define ERR_PDUHEADER_SEGMENTATION_CONTROL_2		398  /**/
#define ERR_PDUHEADER_SEGMENT_METADATA_FLAG_2		411  /**/
#define ERR_PDUHEADER_SOURCE_ENTITY_ID_2		423  /**/
#define ERR_PDUHEADER_TRANSACTION_SEQUENCE_NUMBER_2		431  /**/
#define ERR_PDUHEADER_DESTINATION_ENTITY_ID_2		439  /**/
flag cfdpPDUHeader_IsConstraintValid(const cfdpPDUHeader* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpPDUHeader cfdpPDUHeader_constant;
#else
#define cfdpPDUHeader_constant {.version = 0UL, .pdu_type = PDUType_file_directive, .direction = Direction_toward_receiver, .transmission_mode = TransmissionMode_acknowledged, .crc_flag = CRCFlag_crc_not_present, .large_file_flag = 0UL, .pdu_data_field_length = 0UL, .segmentation_control = SegmentationControl_record_boundries_not_preserved, .segment_metadata_flag = SegmentMetadataFlag_flag_present, .source_entity_id = {.nCount = 1, .arr  = {[0 ... 7-1] = 0 }}, .transaction_sequence_number = {.nCount = 1, .arr  = {[0 ... 7-1] = 0 }}, .destination_entity_id = {.nCount = 1, .arr  = {[0 ... 7-1] = 0 }}}
#endif

void cfdpPDUHeader_Initialize(cfdpPDUHeader* pVal);

#define ERR_UPER_ENCODE_PDUHEADER		443  /**/
#define ERR_UPER_ENCODE_PDUHEADER_VERSION_2		329  /**/
#define ERR_UPER_ENCODE_PDUHEADER_PDU_TYPE_2		339  /**/
#define ERR_UPER_ENCODE_PDUHEADER_DIRECTION_2		349  /**/
#define ERR_UPER_ENCODE_PDUHEADER_TRANSMISSION_MODE_2		359  /**/
#define ERR_UPER_ENCODE_PDUHEADER_CRC_FLAG_2		369  /**/
#define ERR_UPER_ENCODE_PDUHEADER_LARGE_FILE_FLAG_2		379  /**/
#define ERR_UPER_ENCODE_PDUHEADER_PDU_DATA_FIELD_LENGTH_2		389  /**/
#define ERR_UPER_ENCODE_PDUHEADER_SEGMENTATION_CONTROL_2		399  /**/
#define ERR_UPER_ENCODE_PDUHEADER_SEGMENT_METADATA_FLAG_2		412  /**/
#define ERR_UPER_ENCODE_PDUHEADER_SOURCE_ENTITY_ID_2		424  /**/
#define ERR_UPER_ENCODE_PDUHEADER_TRANSACTION_SEQUENCE_NUMBER_2		432  /**/
#define ERR_UPER_ENCODE_PDUHEADER_DESTINATION_ENTITY_ID_2		440  /**/
#define cfdpPDUHeader_REQUIRED_BYTES_FOR_ENCODING       26
#define cfdpPDUHeader_REQUIRED_BITS_FOR_ENCODING        203

flag cfdpPDUHeader_Encode(const cfdpPDUHeader* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PDUHEADER		444  /**/
#define ERR_UPER_DECODE_PDUHEADER_VERSION_2		330  /**/
#define ERR_UPER_DECODE_PDUHEADER_PDU_TYPE_2		340  /**/
#define ERR_UPER_DECODE_PDUHEADER_DIRECTION_2		350  /**/
#define ERR_UPER_DECODE_PDUHEADER_TRANSMISSION_MODE_2		360  /**/
#define ERR_UPER_DECODE_PDUHEADER_CRC_FLAG_2		370  /**/
#define ERR_UPER_DECODE_PDUHEADER_LARGE_FILE_FLAG_2		380  /**/
#define ERR_UPER_DECODE_PDUHEADER_PDU_DATA_FIELD_LENGTH_2		390  /**/
#define ERR_UPER_DECODE_PDUHEADER_SEGMENTATION_CONTROL_2		400  /**/
#define ERR_UPER_DECODE_PDUHEADER_SEGMENT_METADATA_FLAG_2		413  /**/
#define ERR_UPER_DECODE_PDUHEADER_SOURCE_ENTITY_ID_2		425  /**/
#define ERR_UPER_DECODE_PDUHEADER_TRANSACTION_SEQUENCE_NUMBER_2		433  /**/
#define ERR_UPER_DECODE_PDUHEADER_DESTINATION_ENTITY_ID_2		441  /**/
flag cfdpPDUHeader_Decode(cfdpPDUHeader* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PDUHEADER		445  /**/
#define ERR_ACN_ENCODE_PDUHEADER_VERSION_2		331  /**/
#define ERR_ACN_ENCODE_PDUHEADER_PDU_TYPE_2		341  /**/
#define ERR_ACN_ENCODE_PDUHEADER_DIRECTION_2		351  /**/
#define ERR_ACN_ENCODE_PDUHEADER_TRANSMISSION_MODE_2		361  /**/
#define ERR_ACN_ENCODE_PDUHEADER_CRC_FLAG_2		371  /**/
#define ERR_ACN_ENCODE_PDUHEADER_LARGE_FILE_FLAG_2		381  /**/
#define ERR_ACN_ENCODE_PDUHEADER_PDU_DATA_FIELD_LENGTH_2		391  /**/
#define ERR_ACN_ENCODE_PDUHEADER_SEGMENTATION_CONTROL_2		401  /**/
#define ERR_ACN_ENCODE_UPDATE_PDUHEADER_LENGTH_OF_ENTITY_IDS		405  /**/
#define ERR_ACN_ENCODE_PDUHEADER_LENGTH_OF_ENTITY_IDS_UNINITIALIZED		446  /**/
#define ERR_ACN_ENCODE_PDUHEADER_LENGTH_OF_ENTITY_IDS		403  /**/
#define ERR_ACN_ENCODE_PDUHEADER_SEGMENT_METADATA_FLAG_2		414  /**/
#define ERR_ACN_ENCODE_PDUHEADER_LENGTH_OF_TRANSACTION_SEQUENCE_NUMBER_UNINITIALIZED		447  /**/
#define ERR_ACN_ENCODE_PDUHEADER_LENGTH_OF_TRANSACTION_SEQUENCE_NUMBER		416  /**/
#define ERR_ACN_ENCODE_PDUHEADER_SOURCE_ENTITY_ID		421  /**/
#define ERR_ACN_ENCODE_PDUHEADER_TRANSACTION_SEQUENCE_NUMBER		429  /**/
#define ERR_ACN_ENCODE_PDUHEADER_DESTINATION_ENTITY_ID		437  /**/
#define cfdpPDUHeader_REQUIRED_BYTES_FOR_ACN_ENCODING       25
#define cfdpPDUHeader_REQUIRED_BITS_FOR_ACN_ENCODING        200

flag cfdpPDUHeader_ACN_Encode(const cfdpPDUHeader* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PDUHEADER		448  /**/
#define ERR_ACN_DECODE_PDUHEADER_VERSION_2		332  /**/
#define ERR_ACN_DECODE_PDUHEADER_PDU_TYPE_2		342  /**/
#define ERR_ACN_DECODE_PDUHEADER_DIRECTION_2		352  /**/
#define ERR_ACN_DECODE_PDUHEADER_TRANSMISSION_MODE_2		362  /**/
#define ERR_ACN_DECODE_PDUHEADER_CRC_FLAG_2		372  /**/
#define ERR_ACN_DECODE_PDUHEADER_LARGE_FILE_FLAG_2		382  /**/
#define ERR_ACN_DECODE_PDUHEADER_PDU_DATA_FIELD_LENGTH_2		392  /**/
#define ERR_ACN_DECODE_PDUHEADER_SEGMENTATION_CONTROL_2		402  /**/
#define ERR_ACN_DECODE_PDUHEADER_LENGTH_OF_ENTITY_IDS		404  /**/
#define ERR_ACN_DECODE_PDUHEADER_SEGMENT_METADATA_FLAG_2		415  /**/
#define ERR_ACN_DECODE_PDUHEADER_LENGTH_OF_TRANSACTION_SEQUENCE_NUMBER		417  /**/
#define ERR_ACN_DECODE_PDUHEADER_SOURCE_ENTITY_ID		422  /**/
#define ERR_ACN_DECODE_PDUHEADER_TRANSACTION_SEQUENCE_NUMBER		430  /**/
#define ERR_ACN_DECODE_PDUHEADER_DESTINATION_ENTITY_ID		438  /**/
flag cfdpPDUHeader_ACN_Decode(cfdpPDUHeader* pVal, BitStream* pBitStrm, int* pErrCode);


/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */



#ifdef  __cplusplus
}

#endif

#endif
