#ifndef GENERATED_ASN1SCC_dataview_H
#define GENERATED_ASN1SCC_dataview_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"
#include "asn1crt_encoding.h"


#ifdef  __cplusplus
extern "C" {
#endif


typedef asn1SccSint asn1SccMyInt;


flag asn1SccMyInt_Equal(const asn1SccMyInt* pVal1, const asn1SccMyInt* pVal2);

#define ERR_MYINT		1  /*(-100 .. 100)*/
flag asn1SccMyInt_IsConstraintValid(const asn1SccMyInt* pVal, int* pErrCode);

#ifdef __cplusplus
extern const asn1SccMyInt asn1SccMyInt_constant;
#else
#define asn1SccMyInt_constant 0LL
#endif

void asn1SccMyInt_Initialize(asn1SccMyInt* pVal);

#define ERR_UPER_ENCODE_MYINT		2  /**/
#define asn1SccMyInt_REQUIRED_BYTES_FOR_ENCODING       1
#define asn1SccMyInt_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccMyInt_Encode(const asn1SccMyInt* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYINT		3  /**/
flag asn1SccMyInt_Decode(asn1SccMyInt* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MYINT		4  /**/
#define asn1SccMyInt_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define asn1SccMyInt_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag asn1SccMyInt_ACN_Encode(const asn1SccMyInt* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MYINT		5  /**/
flag asn1SccMyInt_ACN_Decode(asn1SccMyInt* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccMyInt2;


flag asn1SccMyInt2_Equal(const asn1SccMyInt2* pVal1, const asn1SccMyInt2* pVal2);

#define ERR_MYINT2		6  /*(0 .. 1000)*/
flag asn1SccMyInt2_IsConstraintValid(const asn1SccMyInt2* pVal, int* pErrCode);

#ifdef __cplusplus
extern const asn1SccMyInt2 asn1SccMyInt2_constant;
#else
#define asn1SccMyInt2_constant 0UL
#endif

void asn1SccMyInt2_Initialize(asn1SccMyInt2* pVal);

#define ERR_UPER_ENCODE_MYINT2		7  /**/
#define asn1SccMyInt2_REQUIRED_BYTES_FOR_ENCODING       2
#define asn1SccMyInt2_REQUIRED_BITS_FOR_ENCODING        10

flag asn1SccMyInt2_Encode(const asn1SccMyInt2* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYINT2		8  /**/
flag asn1SccMyInt2_Decode(asn1SccMyInt2* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MYINT2		9  /**/
#define asn1SccMyInt2_REQUIRED_BYTES_FOR_ACN_ENCODING       2
#define asn1SccMyInt2_REQUIRED_BITS_FOR_ACN_ENCODING        10

flag asn1SccMyInt2_ACN_Encode(const asn1SccMyInt2* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MYINT2		10  /**/
flag asn1SccMyInt2_ACN_Decode(asn1SccMyInt2* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccMySeq --------------------------------------------*/
typedef asn1SccUint asn1SccMySeq_a1;

typedef asn1SccSint asn1SccMySeq_a2;

typedef struct {
    asn1SccMySeq_a1 a1;
    asn1SccMySeq_a2 a2;
    asn1SccMyInt a3;
    asn1SccMyInt2 a4;

} asn1SccMySeq;

flag asn1SccMySeq_a1_Equal(const asn1SccMySeq_a1* pVal1, const asn1SccMySeq_a1* pVal2);

flag asn1SccMySeq_a2_Equal(const asn1SccMySeq_a2* pVal1, const asn1SccMySeq_a2* pVal2);

flag asn1SccMySeq_Equal(const asn1SccMySeq* pVal1, const asn1SccMySeq* pVal2);

#define ERR_MYSEQ_A1		11  /*(1 .. 20)*/
flag asn1SccMySeq_a1_IsConstraintValid(const asn1SccMySeq_a1* pVal, int* pErrCode);

#define ERR_MYSEQ_A2		16  /*(-10 .. 20)*/
flag asn1SccMySeq_a2_IsConstraintValid(const asn1SccMySeq_a2* pVal, int* pErrCode);

#define ERR_MYSEQ		41  /**/
#define ERR_MYSEQ_A3_2		26  /**/
#define ERR_MYSEQ_A4_2		36  /**/
flag asn1SccMySeq_IsConstraintValid(const asn1SccMySeq* pVal, int* pErrCode);

#ifdef __cplusplus
extern const asn1SccMySeq_a1 asn1SccMySeq_a1_constant;
#else
#define asn1SccMySeq_a1_constant 1UL
#endif
#ifdef __cplusplus
extern const asn1SccMySeq_a2 asn1SccMySeq_a2_constant;
#else
#define asn1SccMySeq_a2_constant 0LL
#endif
#ifdef __cplusplus
extern const asn1SccMySeq asn1SccMySeq_constant;
#else
#define asn1SccMySeq_constant {.a1 = 1UL, .a2 = 0LL, .a3 = 0LL, .a4 = 0UL}
#endif

void asn1SccMySeq_Initialize(asn1SccMySeq* pVal);

#define ERR_UPER_ENCODE_MYSEQ		42  /**/
#define ERR_UPER_ENCODE_MYSEQ_A1		12  /**/
#define ERR_UPER_ENCODE_MYSEQ_A2		17  /**/
#define ERR_UPER_ENCODE_MYSEQ_A3_2		27  /**/
#define ERR_UPER_ENCODE_MYSEQ_A4_2		37  /**/
#define asn1SccMySeq_REQUIRED_BYTES_FOR_ENCODING       4
#define asn1SccMySeq_REQUIRED_BITS_FOR_ENCODING        28

flag asn1SccMySeq_Encode(const asn1SccMySeq* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYSEQ		43  /**/
#define ERR_UPER_DECODE_MYSEQ_A1		13  /**/
#define ERR_UPER_DECODE_MYSEQ_A2		18  /**/
#define ERR_UPER_DECODE_MYSEQ_A3_2		28  /**/
#define ERR_UPER_DECODE_MYSEQ_A4_2		38  /**/
flag asn1SccMySeq_Decode(asn1SccMySeq* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MYSEQ		44  /**/
#define ERR_ACN_ENCODE_MYSEQ_A1		14  /**/
#define ERR_ACN_ENCODE_MYSEQ_A2		19  /**/
#define ERR_ACN_ENCODE_MYSEQ_A3_2		29  /**/
#define ERR_ACN_ENCODE_MYSEQ_A4_2		39  /**/
#define asn1SccMySeq_REQUIRED_BYTES_FOR_ACN_ENCODING       7
#define asn1SccMySeq_REQUIRED_BITS_FOR_ACN_ENCODING        55

flag asn1SccMySeq_ACN_Encode(const asn1SccMySeq* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MYSEQ		45  /**/
#define ERR_ACN_DECODE_MYSEQ_A1		15  /**/
#define ERR_ACN_DECODE_MYSEQ_A2		20  /**/
#define ERR_ACN_DECODE_MYSEQ_A3_2		30  /**/
#define ERR_ACN_DECODE_MYSEQ_A4_2		40  /**/
flag asn1SccMySeq_ACN_Decode(asn1SccMySeq* pVal, BitStream* pBitStrm, int* pErrCode);


/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */



#ifdef  __cplusplus
}

#endif

#endif
