#ifndef GENERATED_ASN1SCC_dataview_H
#define GENERATED_ASN1SCC_dataview_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"
#include "asn1crt_encoding.h"


#ifdef  __cplusplus
extern "C" {
#endif


typedef asn1SccUint cfdpDirectiveCode;


flag cfdpDirectiveCode_Equal(const cfdpDirectiveCode* pVal1, const cfdpDirectiveCode* pVal2);

#define ERR_DIRECTIVECODE		1  /*(0..255)*/
flag cfdpDirectiveCode_IsConstraintValid(const cfdpDirectiveCode* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpDirectiveCode cfdpDirectiveCode_constant;
#else
#define cfdpDirectiveCode_constant 0UL
#endif

void cfdpDirectiveCode_Initialize(cfdpDirectiveCode* pVal);

#define ERR_UPER_ENCODE_DIRECTIVECODE		2  /**/
#define cfdpDirectiveCode_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpDirectiveCode_REQUIRED_BITS_FOR_ENCODING        8

flag cfdpDirectiveCode_Encode(const cfdpDirectiveCode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DIRECTIVECODE		3  /**/
flag cfdpDirectiveCode_Decode(cfdpDirectiveCode* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_DIRECTIVECODE		4  /**/
#define cfdpDirectiveCode_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpDirectiveCode_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag cfdpDirectiveCode_ACN_Encode(const cfdpDirectiveCode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_DIRECTIVECODE		5  /**/
flag cfdpDirectiveCode_ACN_Decode(cfdpDirectiveCode* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    DirectiveSubtypeCode_ack_others = 0,
    DirectiveSubtypeCode_ack_finished = 1
} cfdpDirectiveSubtypeCode;

// please use the following macros to avoid breaking code.
#define cfdpDirectiveSubtypeCode_ack_others DirectiveSubtypeCode_ack_others
#define cfdpDirectiveSubtypeCode_ack_finished DirectiveSubtypeCode_ack_finished

flag cfdpDirectiveSubtypeCode_Equal(const cfdpDirectiveSubtypeCode* pVal1, const cfdpDirectiveSubtypeCode* pVal2);

#define ERR_DIRECTIVESUBTYPECODE		6  /*ack-others | ack-finished*/
flag cfdpDirectiveSubtypeCode_IsConstraintValid(const cfdpDirectiveSubtypeCode* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpDirectiveSubtypeCode cfdpDirectiveSubtypeCode_constant;
#else
#define cfdpDirectiveSubtypeCode_constant DirectiveSubtypeCode_ack_others
#endif

void cfdpDirectiveSubtypeCode_Initialize(cfdpDirectiveSubtypeCode* pVal);

#define ERR_UPER_ENCODE_DIRECTIVESUBTYPECODE		7  /**/
#define cfdpDirectiveSubtypeCode_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpDirectiveSubtypeCode_REQUIRED_BITS_FOR_ENCODING        1

flag cfdpDirectiveSubtypeCode_Encode(const cfdpDirectiveSubtypeCode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DIRECTIVESUBTYPECODE		8  /**/
flag cfdpDirectiveSubtypeCode_Decode(cfdpDirectiveSubtypeCode* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_DIRECTIVESUBTYPECODE		9  /**/
#define cfdpDirectiveSubtypeCode_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpDirectiveSubtypeCode_REQUIRED_BITS_FOR_ACN_ENCODING        4

flag cfdpDirectiveSubtypeCode_ACN_Encode(const cfdpDirectiveSubtypeCode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_DIRECTIVESUBTYPECODE		10  /**/
flag cfdpDirectiveSubtypeCode_ACN_Decode(cfdpDirectiveSubtypeCode* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    ConditionCode_no_error = 0,
    ConditionCode_positive_ack_limit_reached = 1,
    ConditionCode_keep_alive_limit_reached = 2,
    ConditionCode_invalid_transmission_mode = 3,
    ConditionCode_filestore_rejection = 4,
    ConditionCode_file_checksum_failure = 5,
    ConditionCode_file_size_error = 6,
    ConditionCode_nak_limit_reached = 7,
    ConditionCode_inactivity_detected = 8,
    ConditionCode_invalid_file_structure = 9,
    ConditionCode_suspend_request_received = 14,
    ConditionCode_cancel_request_received = 15
} cfdpConditionCode;

// please use the following macros to avoid breaking code.
#define cfdpConditionCode_no_error ConditionCode_no_error
#define cfdpConditionCode_positive_ack_limit_reached ConditionCode_positive_ack_limit_reached
#define cfdpConditionCode_keep_alive_limit_reached ConditionCode_keep_alive_limit_reached
#define cfdpConditionCode_invalid_transmission_mode ConditionCode_invalid_transmission_mode
#define cfdpConditionCode_filestore_rejection ConditionCode_filestore_rejection
#define cfdpConditionCode_file_checksum_failure ConditionCode_file_checksum_failure
#define cfdpConditionCode_file_size_error ConditionCode_file_size_error
#define cfdpConditionCode_nak_limit_reached ConditionCode_nak_limit_reached
#define cfdpConditionCode_inactivity_detected ConditionCode_inactivity_detected
#define cfdpConditionCode_invalid_file_structure ConditionCode_invalid_file_structure
#define cfdpConditionCode_suspend_request_received ConditionCode_suspend_request_received
#define cfdpConditionCode_cancel_request_received ConditionCode_cancel_request_received

flag cfdpConditionCode_Equal(const cfdpConditionCode* pVal1, const cfdpConditionCode* pVal2);

#define ERR_CONDITIONCODE		11  /*no-error | positive-ack-limit-reached | keep-alive-limit-reached | invalid-transmission-mode | filestore-rejection | file-checksum-failure | file-size-error | nak-limit-reached | inactivity-detected | invalid-file-structure | suspend-request-received | cancel-request-received*/
flag cfdpConditionCode_IsConstraintValid(const cfdpConditionCode* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpConditionCode cfdpConditionCode_constant;
#else
#define cfdpConditionCode_constant ConditionCode_no_error
#endif

void cfdpConditionCode_Initialize(cfdpConditionCode* pVal);

#define ERR_UPER_ENCODE_CONDITIONCODE		12  /**/
#define cfdpConditionCode_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpConditionCode_REQUIRED_BITS_FOR_ENCODING        4

flag cfdpConditionCode_Encode(const cfdpConditionCode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_CONDITIONCODE		13  /**/
flag cfdpConditionCode_Decode(cfdpConditionCode* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_CONDITIONCODE		14  /**/
#define cfdpConditionCode_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpConditionCode_REQUIRED_BITS_FOR_ACN_ENCODING        4

flag cfdpConditionCode_ACN_Encode(const cfdpConditionCode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_CONDITIONCODE		15  /**/
flag cfdpConditionCode_ACN_Decode(cfdpConditionCode* pVal, BitStream* pBitStrm, int* pErrCode);
typedef struct {
    byte arr[4];
} cfdpFileChecksum;


flag cfdpFileChecksum_Equal(const cfdpFileChecksum* pVal1, const cfdpFileChecksum* pVal2);

#define ERR_FILECHECKSUM		16  /*(SIZE(4))*/
flag cfdpFileChecksum_IsConstraintValid(const cfdpFileChecksum* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpFileChecksum cfdpFileChecksum_constant;
#else
#define cfdpFileChecksum_constant {.arr  = {[0 ... 4-1] = 0 }}
#endif

void cfdpFileChecksum_Initialize(cfdpFileChecksum* pVal);

#define ERR_UPER_ENCODE_FILECHECKSUM		17  /**/
#define cfdpFileChecksum_REQUIRED_BYTES_FOR_ENCODING       4
#define cfdpFileChecksum_REQUIRED_BITS_FOR_ENCODING        32

flag cfdpFileChecksum_Encode(const cfdpFileChecksum* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_FILECHECKSUM		18  /**/
flag cfdpFileChecksum_Decode(cfdpFileChecksum* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_FILECHECKSUM		19  /**/
#define cfdpFileChecksum_REQUIRED_BYTES_FOR_ACN_ENCODING       4
#define cfdpFileChecksum_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag cfdpFileChecksum_ACN_Encode(const cfdpFileChecksum* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_FILECHECKSUM		20  /**/
flag cfdpFileChecksum_ACN_Decode(cfdpFileChecksum* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint cfdpFileSize;


flag cfdpFileSize_Equal(const cfdpFileSize* pVal1, const cfdpFileSize* pVal2);

#define ERR_FILESIZE		21  /*(0..4294967295)*/
flag cfdpFileSize_IsConstraintValid(const cfdpFileSize* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpFileSize cfdpFileSize_constant;
#else
#define cfdpFileSize_constant 0UL
#endif

void cfdpFileSize_Initialize(cfdpFileSize* pVal);

#define ERR_UPER_ENCODE_FILESIZE		22  /**/
#define cfdpFileSize_REQUIRED_BYTES_FOR_ENCODING       4
#define cfdpFileSize_REQUIRED_BITS_FOR_ENCODING        32

flag cfdpFileSize_Encode(const cfdpFileSize* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_FILESIZE		23  /**/
flag cfdpFileSize_Decode(cfdpFileSize* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_FILESIZE		24  /**/
#define cfdpFileSize_REQUIRED_BYTES_FOR_ACN_ENCODING       4
#define cfdpFileSize_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag cfdpFileSize_ACN_Encode(const cfdpFileSize* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_FILESIZE		25  /**/
flag cfdpFileSize_ACN_Decode(cfdpFileSize* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- cfdpEofPDU --------------------------------------------*/
typedef struct {
    cfdpConditionCode condition_code;
    cfdpFileChecksum file_checksum;
    cfdpFileSize file_size;

} cfdpEofPDU;

flag cfdpEofPDU_Equal(const cfdpEofPDU* pVal1, const cfdpEofPDU* pVal2);

#define ERR_EOFPDU		58  /**/
#define ERR_EOFPDU_CONDITION_CODE_2		31  /**/
#define ERR_EOFPDU_FILE_CHECKSUM_2		43  /**/
#define ERR_EOFPDU_FILE_SIZE_2		53  /**/
flag cfdpEofPDU_IsConstraintValid(const cfdpEofPDU* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpEofPDU cfdpEofPDU_constant;
#else
#define cfdpEofPDU_constant {.condition_code = ConditionCode_no_error, .file_checksum = {.arr  = {[0 ... 4-1] = 0 }}, .file_size = 0UL}
#endif

void cfdpEofPDU_Initialize(cfdpEofPDU* pVal);

#define ERR_UPER_ENCODE_EOFPDU		59  /**/
#define ERR_UPER_ENCODE_EOFPDU_CONDITION_CODE_2		32  /**/
#define ERR_UPER_ENCODE_EOFPDU_FILE_CHECKSUM_2		44  /**/
#define ERR_UPER_ENCODE_EOFPDU_FILE_SIZE_2		54  /**/
#define cfdpEofPDU_REQUIRED_BYTES_FOR_ENCODING       9
#define cfdpEofPDU_REQUIRED_BITS_FOR_ENCODING        68

flag cfdpEofPDU_Encode(const cfdpEofPDU* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_EOFPDU		60  /**/
#define ERR_UPER_DECODE_EOFPDU_CONDITION_CODE_2		33  /**/
#define ERR_UPER_DECODE_EOFPDU_FILE_CHECKSUM_2		45  /**/
#define ERR_UPER_DECODE_EOFPDU_FILE_SIZE_2		55  /**/
flag cfdpEofPDU_Decode(cfdpEofPDU* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_EOFPDU		61  /**/
#define ERR_ACN_ENCODE_EOFPDU_CONDITION_CODE_2		34  /**/
#define ERR_ACN_ENCODE_EOFPDU_SPARE		36  /**/
#define ERR_ACN_ENCODE_EOFPDU_FILE_CHECKSUM_2		46  /**/
#define ERR_ACN_ENCODE_EOFPDU_FILE_SIZE_2		56  /**/
#define cfdpEofPDU_REQUIRED_BYTES_FOR_ACN_ENCODING       9
#define cfdpEofPDU_REQUIRED_BITS_FOR_ACN_ENCODING        72

flag cfdpEofPDU_ACN_Encode(const cfdpEofPDU* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_EOFPDU		62  /**/
#define ERR_ACN_DECODE_EOFPDU_CONDITION_CODE_2		35  /**/
#define ERR_ACN_DECODE_EOFPDU_SPARE		37  /**/
#define ERR_ACN_DECODE_EOFPDU_FILE_CHECKSUM_2		47  /**/
#define ERR_ACN_DECODE_EOFPDU_FILE_SIZE_2		57  /**/
flag cfdpEofPDU_ACN_Decode(cfdpEofPDU* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    AckTransactionStatus_undefined = 0,
    AckTransactionStatus_active = 1,
    AckTransactionStatus_terminated = 2,
    AckTransactionStatus_unrecognized = 3
} cfdpAckTransactionStatus;

// please use the following macros to avoid breaking code.
#define cfdpAckTransactionStatus_undefined AckTransactionStatus_undefined
#define cfdpAckTransactionStatus_active AckTransactionStatus_active
#define cfdpAckTransactionStatus_terminated AckTransactionStatus_terminated
#define cfdpAckTransactionStatus_unrecognized AckTransactionStatus_unrecognized

flag cfdpAckTransactionStatus_Equal(const cfdpAckTransactionStatus* pVal1, const cfdpAckTransactionStatus* pVal2);

#define ERR_ACKTRANSACTIONSTATUS		63  /*undefined | active | terminated | unrecognized*/
flag cfdpAckTransactionStatus_IsConstraintValid(const cfdpAckTransactionStatus* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpAckTransactionStatus cfdpAckTransactionStatus_constant;
#else
#define cfdpAckTransactionStatus_constant AckTransactionStatus_undefined
#endif

void cfdpAckTransactionStatus_Initialize(cfdpAckTransactionStatus* pVal);

#define ERR_UPER_ENCODE_ACKTRANSACTIONSTATUS		64  /**/
#define cfdpAckTransactionStatus_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpAckTransactionStatus_REQUIRED_BITS_FOR_ENCODING        2

flag cfdpAckTransactionStatus_Encode(const cfdpAckTransactionStatus* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ACKTRANSACTIONSTATUS		65  /**/
flag cfdpAckTransactionStatus_Decode(cfdpAckTransactionStatus* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_ACKTRANSACTIONSTATUS		66  /**/
#define cfdpAckTransactionStatus_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpAckTransactionStatus_REQUIRED_BITS_FOR_ACN_ENCODING        2

flag cfdpAckTransactionStatus_ACN_Encode(const cfdpAckTransactionStatus* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_ACKTRANSACTIONSTATUS		67  /**/
flag cfdpAckTransactionStatus_ACN_Decode(cfdpAckTransactionStatus* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- cfdpAckPDU --------------------------------------------*/
typedef struct {
    cfdpDirectiveCode directive_code_of_ack_pdu;
    cfdpDirectiveSubtypeCode directive_subtype_code;
    cfdpConditionCode condition_code;
    cfdpAckTransactionStatus transaction_status;

} cfdpAckPDU;

flag cfdpAckPDU_Equal(const cfdpAckPDU* pVal1, const cfdpAckPDU* pVal2);

#define ERR_ACKPDU		110  /**/
#define ERR_ACKPDU_DIRECTIVE_CODE_OF_ACK_PDU_2		73  /**/
#define ERR_ACKPDU_DIRECTIVE_SUBTYPE_CODE_2		83  /**/
#define ERR_ACKPDU_CONDITION_CODE_2		93  /**/
#define ERR_ACKPDU_TRANSACTION_STATUS_2		105  /**/
flag cfdpAckPDU_IsConstraintValid(const cfdpAckPDU* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpAckPDU cfdpAckPDU_constant;
#else
#define cfdpAckPDU_constant {.directive_code_of_ack_pdu = 0UL, .directive_subtype_code = DirectiveSubtypeCode_ack_others, .condition_code = ConditionCode_no_error, .transaction_status = AckTransactionStatus_undefined}
#endif

void cfdpAckPDU_Initialize(cfdpAckPDU* pVal);

#define ERR_UPER_ENCODE_ACKPDU		111  /**/
#define ERR_UPER_ENCODE_ACKPDU_DIRECTIVE_CODE_OF_ACK_PDU_2		74  /**/
#define ERR_UPER_ENCODE_ACKPDU_DIRECTIVE_SUBTYPE_CODE_2		84  /**/
#define ERR_UPER_ENCODE_ACKPDU_CONDITION_CODE_2		94  /**/
#define ERR_UPER_ENCODE_ACKPDU_TRANSACTION_STATUS_2		106  /**/
#define cfdpAckPDU_REQUIRED_BYTES_FOR_ENCODING       2
#define cfdpAckPDU_REQUIRED_BITS_FOR_ENCODING        15

flag cfdpAckPDU_Encode(const cfdpAckPDU* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ACKPDU		112  /**/
#define ERR_UPER_DECODE_ACKPDU_DIRECTIVE_CODE_OF_ACK_PDU_2		75  /**/
#define ERR_UPER_DECODE_ACKPDU_DIRECTIVE_SUBTYPE_CODE_2		85  /**/
#define ERR_UPER_DECODE_ACKPDU_CONDITION_CODE_2		95  /**/
#define ERR_UPER_DECODE_ACKPDU_TRANSACTION_STATUS_2		107  /**/
flag cfdpAckPDU_Decode(cfdpAckPDU* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_ACKPDU		113  /**/
#define ERR_ACN_ENCODE_ACKPDU_DIRECTIVE_CODE_OF_ACK_PDU_2		76  /**/
#define ERR_ACN_ENCODE_ACKPDU_DIRECTIVE_SUBTYPE_CODE_2		86  /**/
#define ERR_ACN_ENCODE_ACKPDU_CONDITION_CODE_2		96  /**/
#define ERR_ACN_ENCODE_ACKPDU_SPARE		98  /**/
#define ERR_ACN_ENCODE_ACKPDU_TRANSACTION_STATUS_2		108  /**/
#define cfdpAckPDU_REQUIRED_BYTES_FOR_ACN_ENCODING       3
#define cfdpAckPDU_REQUIRED_BITS_FOR_ACN_ENCODING        20

flag cfdpAckPDU_ACN_Encode(const cfdpAckPDU* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_ACKPDU		114  /**/
#define ERR_ACN_DECODE_ACKPDU_DIRECTIVE_CODE_OF_ACK_PDU_2		77  /**/
#define ERR_ACN_DECODE_ACKPDU_DIRECTIVE_SUBTYPE_CODE_2		87  /**/
#define ERR_ACN_DECODE_ACKPDU_CONDITION_CODE_2		97  /**/
#define ERR_ACN_DECODE_ACKPDU_SPARE		99  /**/
#define ERR_ACN_DECODE_ACKPDU_TRANSACTION_STATUS_2		109  /**/
flag cfdpAckPDU_ACN_Decode(cfdpAckPDU* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    DeliveryCode_data_complete = 0,
    DeliveryCode_data_incomplete = 1
} cfdpDeliveryCode;

// please use the following macros to avoid breaking code.
#define cfdpDeliveryCode_data_complete DeliveryCode_data_complete
#define cfdpDeliveryCode_data_incomplete DeliveryCode_data_incomplete

flag cfdpDeliveryCode_Equal(const cfdpDeliveryCode* pVal1, const cfdpDeliveryCode* pVal2);

#define ERR_DELIVERYCODE		115  /*data-complete | data-incomplete*/
flag cfdpDeliveryCode_IsConstraintValid(const cfdpDeliveryCode* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpDeliveryCode cfdpDeliveryCode_constant;
#else
#define cfdpDeliveryCode_constant DeliveryCode_data_complete
#endif

void cfdpDeliveryCode_Initialize(cfdpDeliveryCode* pVal);

#define ERR_UPER_ENCODE_DELIVERYCODE		116  /**/
#define cfdpDeliveryCode_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpDeliveryCode_REQUIRED_BITS_FOR_ENCODING        1

flag cfdpDeliveryCode_Encode(const cfdpDeliveryCode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DELIVERYCODE		117  /**/
flag cfdpDeliveryCode_Decode(cfdpDeliveryCode* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_DELIVERYCODE		118  /**/
#define cfdpDeliveryCode_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpDeliveryCode_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag cfdpDeliveryCode_ACN_Encode(const cfdpDeliveryCode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_DELIVERYCODE		119  /**/
flag cfdpDeliveryCode_ACN_Decode(cfdpDeliveryCode* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    ClosureRequested_requested = 0,
    ClosureRequested_not_requested = 1
} cfdpClosureRequested;

// please use the following macros to avoid breaking code.
#define cfdpClosureRequested_requested ClosureRequested_requested
#define cfdpClosureRequested_not_requested ClosureRequested_not_requested

flag cfdpClosureRequested_Equal(const cfdpClosureRequested* pVal1, const cfdpClosureRequested* pVal2);

#define ERR_CLOSUREREQUESTED		120  /*requested | not-requested*/
flag cfdpClosureRequested_IsConstraintValid(const cfdpClosureRequested* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpClosureRequested cfdpClosureRequested_constant;
#else
#define cfdpClosureRequested_constant ClosureRequested_requested
#endif

void cfdpClosureRequested_Initialize(cfdpClosureRequested* pVal);

#define ERR_UPER_ENCODE_CLOSUREREQUESTED		121  /**/
#define cfdpClosureRequested_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpClosureRequested_REQUIRED_BITS_FOR_ENCODING        1

flag cfdpClosureRequested_Encode(const cfdpClosureRequested* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_CLOSUREREQUESTED		122  /**/
flag cfdpClosureRequested_Decode(cfdpClosureRequested* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_CLOSUREREQUESTED		123  /**/
#define cfdpClosureRequested_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpClosureRequested_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag cfdpClosureRequested_ACN_Encode(const cfdpClosureRequested* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_CLOSUREREQUESTED		124  /**/
flag cfdpClosureRequested_ACN_Decode(cfdpClosureRequested* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint cfdpChecksumType;


flag cfdpChecksumType_Equal(const cfdpChecksumType* pVal1, const cfdpChecksumType* pVal2);

#define ERR_CHECKSUMTYPE		125  /*(0..15)*/
flag cfdpChecksumType_IsConstraintValid(const cfdpChecksumType* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpChecksumType cfdpChecksumType_constant;
#else
#define cfdpChecksumType_constant 0UL
#endif

void cfdpChecksumType_Initialize(cfdpChecksumType* pVal);

#define ERR_UPER_ENCODE_CHECKSUMTYPE		126  /**/
#define cfdpChecksumType_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpChecksumType_REQUIRED_BITS_FOR_ENCODING        4

flag cfdpChecksumType_Encode(const cfdpChecksumType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_CHECKSUMTYPE		127  /**/
flag cfdpChecksumType_Decode(cfdpChecksumType* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_CHECKSUMTYPE		128  /**/
#define cfdpChecksumType_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpChecksumType_REQUIRED_BITS_FOR_ACN_ENCODING        4

flag cfdpChecksumType_ACN_Encode(const cfdpChecksumType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_CHECKSUMTYPE		129  /**/
flag cfdpChecksumType_ACN_Decode(cfdpChecksumType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint cfdpFileNameSize;


flag cfdpFileNameSize_Equal(const cfdpFileNameSize* pVal1, const cfdpFileNameSize* pVal2);

#define ERR_FILENAMESIZE		130  /*(0..32)*/
flag cfdpFileNameSize_IsConstraintValid(const cfdpFileNameSize* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpFileNameSize cfdpFileNameSize_constant;
#else
#define cfdpFileNameSize_constant 0UL
#endif

void cfdpFileNameSize_Initialize(cfdpFileNameSize* pVal);

#define ERR_UPER_ENCODE_FILENAMESIZE		131  /**/
#define cfdpFileNameSize_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpFileNameSize_REQUIRED_BITS_FOR_ENCODING        6

flag cfdpFileNameSize_Encode(const cfdpFileNameSize* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_FILENAMESIZE		132  /**/
flag cfdpFileNameSize_Decode(cfdpFileNameSize* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_FILENAMESIZE		133  /**/
#define cfdpFileNameSize_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpFileNameSize_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag cfdpFileNameSize_ACN_Encode(const cfdpFileNameSize* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_FILENAMESIZE		134  /**/
flag cfdpFileNameSize_ACN_Decode(cfdpFileNameSize* pVal, BitStream* pBitStrm, int* pErrCode);
typedef struct {
    int nCount;
    byte arr[32];
} cfdpFileName;


flag cfdpFileName_Equal(const cfdpFileName* pVal1, const cfdpFileName* pVal2);

#define ERR_FILENAME		135  /*(SIZE(0..32))*/
flag cfdpFileName_IsConstraintValid(const cfdpFileName* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpFileName cfdpFileName_constant;
#else
#define cfdpFileName_constant {.nCount = 0, .arr  = {[0 ... 32-1] = 0 }}
#endif

void cfdpFileName_Initialize(cfdpFileName* pVal);

#define ERR_UPER_ENCODE_FILENAME		136  /**/
#define cfdpFileName_REQUIRED_BYTES_FOR_ENCODING       33
#define cfdpFileName_REQUIRED_BITS_FOR_ENCODING        262

flag cfdpFileName_Encode(const cfdpFileName* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_FILENAME		137  /**/
flag cfdpFileName_Decode(cfdpFileName* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_FILENAME		138  /**/
#define cfdpFileName_REQUIRED_BYTES_FOR_ACN_ENCODING       33
#define cfdpFileName_REQUIRED_BITS_FOR_ACN_ENCODING        262

flag cfdpFileName_ACN_Encode(const cfdpFileName* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_FILENAME		139  /**/
flag cfdpFileName_ACN_Decode(cfdpFileName* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- cfdpMetadataPDU --------------------------------------------*/
typedef struct {
    cfdpClosureRequested closure_requested;
    cfdpChecksumType checksum_type;
    cfdpFileSize file_size;
    cfdpFileName source_file_name;
    cfdpFileName destination_file_name;

} cfdpMetadataPDU;

flag cfdpMetadataPDU_Equal(const cfdpMetadataPDU* pVal1, const cfdpMetadataPDU* pVal2);

#define ERR_METADATAPDU		194  /**/
#define ERR_METADATAPDU_CLOSURE_REQUESTED_2		147  /**/
#define ERR_METADATAPDU_CHECKSUM_TYPE_2		159  /**/
#define ERR_METADATAPDU_FILE_SIZE_2		169  /**/
#define ERR_METADATAPDU_SOURCE_FILE_NAME_2		181  /**/
#define ERR_METADATAPDU_DESTINATION_FILE_NAME_2		191  /**/
flag cfdpMetadataPDU_IsConstraintValid(const cfdpMetadataPDU* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpMetadataPDU cfdpMetadataPDU_constant;
#else
#define cfdpMetadataPDU_constant {.closure_requested = ClosureRequested_requested, .checksum_type = 0UL, .file_size = 0UL, .source_file_name = {.nCount = 0, .arr  = {[0 ... 32-1] = 0 }}, .destination_file_name = {.nCount = 0, .arr  = {[0 ... 32-1] = 0 }}}
#endif

void cfdpMetadataPDU_Initialize(cfdpMetadataPDU* pVal);

#define ERR_UPER_ENCODE_METADATAPDU		195  /**/
#define ERR_UPER_ENCODE_METADATAPDU_CLOSURE_REQUESTED_2		148  /**/
#define ERR_UPER_ENCODE_METADATAPDU_CHECKSUM_TYPE_2		160  /**/
#define ERR_UPER_ENCODE_METADATAPDU_FILE_SIZE_2		170  /**/
#define ERR_UPER_ENCODE_METADATAPDU_SOURCE_FILE_NAME_2		182  /**/
#define ERR_UPER_ENCODE_METADATAPDU_DESTINATION_FILE_NAME_2		192  /**/
#define cfdpMetadataPDU_REQUIRED_BYTES_FOR_ENCODING       71
#define cfdpMetadataPDU_REQUIRED_BITS_FOR_ENCODING        561

flag cfdpMetadataPDU_Encode(const cfdpMetadataPDU* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_METADATAPDU		196  /**/
#define ERR_UPER_DECODE_METADATAPDU_CLOSURE_REQUESTED_2		149  /**/
#define ERR_UPER_DECODE_METADATAPDU_CHECKSUM_TYPE_2		161  /**/
#define ERR_UPER_DECODE_METADATAPDU_FILE_SIZE_2		171  /**/
#define ERR_UPER_DECODE_METADATAPDU_SOURCE_FILE_NAME_2		183  /**/
#define ERR_UPER_DECODE_METADATAPDU_DESTINATION_FILE_NAME_2		193  /**/
flag cfdpMetadataPDU_Decode(cfdpMetadataPDU* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_METADATAPDU		197  /**/
#define ERR_ACN_ENCODE_METADATAPDU_RESERVED1		140  /**/
#define ERR_ACN_ENCODE_METADATAPDU_CLOSURE_REQUESTED_2		150  /**/
#define ERR_ACN_ENCODE_METADATAPDU_RESERVED2		152  /**/
#define ERR_ACN_ENCODE_METADATAPDU_CHECKSUM_TYPE_2		162  /**/
#define ERR_ACN_ENCODE_METADATAPDU_FILE_SIZE_2		172  /**/
#define ERR_ACN_ENCODE_METADATAPDU_SOURCE_FILE_NAME_SIZE_UNINITIALIZED		198  /**/
#define ERR_ACN_ENCODE_METADATAPDU_SOURCE_FILE_NAME_SIZE		174  /**/
#define ERR_ACN_ENCODE_METADATAPDU_SOURCE_FILE_NAME		179  /**/
#define ERR_ACN_ENCODE_METADATAPDU_DESTINATION_FILE_NAME_SIZE_UNINITIALIZED		199  /**/
#define ERR_ACN_ENCODE_METADATAPDU_DESTINATION_FILE_NAME_SIZE		184  /**/
#define ERR_ACN_ENCODE_METADATAPDU_DESTINATION_FILE_NAME		189  /**/
#define cfdpMetadataPDU_REQUIRED_BYTES_FOR_ACN_ENCODING       71
#define cfdpMetadataPDU_REQUIRED_BITS_FOR_ACN_ENCODING        568

flag cfdpMetadataPDU_ACN_Encode(const cfdpMetadataPDU* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_METADATAPDU		200  /**/
#define ERR_ACN_DECODE_METADATAPDU_RESERVED1		141  /**/
#define ERR_ACN_DECODE_METADATAPDU_CLOSURE_REQUESTED_2		151  /**/
#define ERR_ACN_DECODE_METADATAPDU_RESERVED2		153  /**/
#define ERR_ACN_DECODE_METADATAPDU_CHECKSUM_TYPE_2		163  /**/
#define ERR_ACN_DECODE_METADATAPDU_FILE_SIZE_2		173  /**/
#define ERR_ACN_DECODE_METADATAPDU_SOURCE_FILE_NAME_SIZE		175  /**/
#define ERR_ACN_DECODE_METADATAPDU_SOURCE_FILE_NAME		180  /**/
#define ERR_ACN_DECODE_METADATAPDU_DESTINATION_FILE_NAME_SIZE		185  /**/
#define ERR_ACN_DECODE_METADATAPDU_DESTINATION_FILE_NAME		190  /**/
flag cfdpMetadataPDU_ACN_Decode(cfdpMetadataPDU* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    FileStatus_discarted_deliberately = 0,
    FileStatus_discarted_file_rejection = 1,
    FileStatus_retained_successfully = 2,
    FileStatus_unreported = 3
} cfdpFileStatus;

// please use the following macros to avoid breaking code.
#define cfdpFileStatus_discarted_deliberately FileStatus_discarted_deliberately
#define cfdpFileStatus_discarted_file_rejection FileStatus_discarted_file_rejection
#define cfdpFileStatus_retained_successfully FileStatus_retained_successfully
#define cfdpFileStatus_unreported FileStatus_unreported

flag cfdpFileStatus_Equal(const cfdpFileStatus* pVal1, const cfdpFileStatus* pVal2);

#define ERR_FILESTATUS		201  /*discarted-deliberately | discarted-file-rejection | retained-successfully | unreported*/
flag cfdpFileStatus_IsConstraintValid(const cfdpFileStatus* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpFileStatus cfdpFileStatus_constant;
#else
#define cfdpFileStatus_constant FileStatus_discarted_deliberately
#endif

void cfdpFileStatus_Initialize(cfdpFileStatus* pVal);

#define ERR_UPER_ENCODE_FILESTATUS		202  /**/
#define cfdpFileStatus_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpFileStatus_REQUIRED_BITS_FOR_ENCODING        2

flag cfdpFileStatus_Encode(const cfdpFileStatus* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_FILESTATUS		203  /**/
flag cfdpFileStatus_Decode(cfdpFileStatus* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_FILESTATUS		204  /**/
#define cfdpFileStatus_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpFileStatus_REQUIRED_BITS_FOR_ACN_ENCODING        2

flag cfdpFileStatus_ACN_Encode(const cfdpFileStatus* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_FILESTATUS		205  /**/
flag cfdpFileStatus_ACN_Decode(cfdpFileStatus* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- cfdpFinishedPDU --------------------------------------------*/
typedef struct {
    cfdpConditionCode condition_code;
    cfdpDeliveryCode delivery_code;
    cfdpFileStatus file_status;

} cfdpFinishedPDU;

flag cfdpFinishedPDU_Equal(const cfdpFinishedPDU* pVal1, const cfdpFinishedPDU* pVal2);

#define ERR_FINISHEDPDU		238  /**/
#define ERR_FINISHEDPDU_CONDITION_CODE_2		211  /**/
#define ERR_FINISHEDPDU_DELIVERY_CODE_2		223  /**/
#define ERR_FINISHEDPDU_FILE_STATUS_2		233  /**/
flag cfdpFinishedPDU_IsConstraintValid(const cfdpFinishedPDU* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpFinishedPDU cfdpFinishedPDU_constant;
#else
#define cfdpFinishedPDU_constant {.condition_code = ConditionCode_no_error, .delivery_code = DeliveryCode_data_complete, .file_status = FileStatus_discarted_deliberately}
#endif

void cfdpFinishedPDU_Initialize(cfdpFinishedPDU* pVal);

#define ERR_UPER_ENCODE_FINISHEDPDU		239  /**/
#define ERR_UPER_ENCODE_FINISHEDPDU_CONDITION_CODE_2		212  /**/
#define ERR_UPER_ENCODE_FINISHEDPDU_DELIVERY_CODE_2		224  /**/
#define ERR_UPER_ENCODE_FINISHEDPDU_FILE_STATUS_2		234  /**/
#define cfdpFinishedPDU_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpFinishedPDU_REQUIRED_BITS_FOR_ENCODING        7

flag cfdpFinishedPDU_Encode(const cfdpFinishedPDU* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_FINISHEDPDU		240  /**/
#define ERR_UPER_DECODE_FINISHEDPDU_CONDITION_CODE_2		213  /**/
#define ERR_UPER_DECODE_FINISHEDPDU_DELIVERY_CODE_2		225  /**/
#define ERR_UPER_DECODE_FINISHEDPDU_FILE_STATUS_2		235  /**/
flag cfdpFinishedPDU_Decode(cfdpFinishedPDU* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_FINISHEDPDU		241  /**/
#define ERR_ACN_ENCODE_FINISHEDPDU_CONDITION_CODE_2		214  /**/
#define ERR_ACN_ENCODE_FINISHEDPDU_END_SYSTEM_STATUS		216  /**/
#define ERR_ACN_ENCODE_FINISHEDPDU_DELIVERY_CODE_2		226  /**/
#define ERR_ACN_ENCODE_FINISHEDPDU_FILE_STATUS_2		236  /**/
#define cfdpFinishedPDU_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpFinishedPDU_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag cfdpFinishedPDU_ACN_Encode(const cfdpFinishedPDU* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_FINISHEDPDU		242  /**/
#define ERR_ACN_DECODE_FINISHEDPDU_CONDITION_CODE_2		215  /**/
#define ERR_ACN_DECODE_FINISHEDPDU_END_SYSTEM_STATUS		217  /**/
#define ERR_ACN_DECODE_FINISHEDPDU_DELIVERY_CODE_2		227  /**/
#define ERR_ACN_DECODE_FINISHEDPDU_FILE_STATUS_2		237  /**/
flag cfdpFinishedPDU_ACN_Decode(cfdpFinishedPDU* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- cfdpFileDirectivePDU --------------------------------------------*/

typedef enum {
    FileDirectivePDU_NONE,
    FileDirectivePDU_eof_pdu_PRESENT,
    FileDirectivePDU_finished_pdu_PRESENT,
    FileDirectivePDU_ack_pdu_PRESENT,
    FileDirectivePDU_metadata_pdu_PRESENT
} cfdpFileDirectivePDU_selection;

typedef union {
    cfdpEofPDU eof_pdu;
    cfdpFinishedPDU finished_pdu;
    cfdpAckPDU ack_pdu;
    cfdpMetadataPDU metadata_pdu;
} cfdpFileDirectivePDU_unchecked_union;

typedef struct {
    cfdpFileDirectivePDU_selection kind;

    cfdpFileDirectivePDU_unchecked_union u;
} cfdpFileDirectivePDU;

flag cfdpFileDirectivePDU_Equal(const cfdpFileDirectivePDU* pVal1, const cfdpFileDirectivePDU* pVal2);

#define ERR_FILEDIRECTIVEPDU		435  /**/
#define ERR_FILEDIRECTIVEPDU_EOF_PDU_2		280  /**/
#define ERR_FILEDIRECTIVEPDU_FINISHED_PDU_2		320  /**/
#define ERR_FILEDIRECTIVEPDU_ACK_PDU_2		370  /**/
#define ERR_FILEDIRECTIVEPDU_METADATA_PDU_2		432  /**/
flag cfdpFileDirectivePDU_IsConstraintValid(const cfdpFileDirectivePDU* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpFileDirectivePDU cfdpFileDirectivePDU_constant;
#else
#define cfdpFileDirectivePDU_constant {.kind = FileDirectivePDU_eof_pdu_PRESENT, .u.eof_pdu = cfdpEofPDU_constant}
#endif

void cfdpFileDirectivePDU_Initialize(cfdpFileDirectivePDU* pVal);

#define ERR_UPER_ENCODE_FILEDIRECTIVEPDU		436  /**/
#define ERR_UPER_ENCODE_FILEDIRECTIVEPDU_EOF_PDU_2		281  /**/
#define ERR_UPER_ENCODE_FILEDIRECTIVEPDU_FINISHED_PDU_2		321  /**/
#define ERR_UPER_ENCODE_FILEDIRECTIVEPDU_ACK_PDU_2		371  /**/
#define ERR_UPER_ENCODE_FILEDIRECTIVEPDU_METADATA_PDU_2		433  /**/
#define cfdpFileDirectivePDU_REQUIRED_BYTES_FOR_ENCODING       71
#define cfdpFileDirectivePDU_REQUIRED_BITS_FOR_ENCODING        563

flag cfdpFileDirectivePDU_Encode(const cfdpFileDirectivePDU* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_FILEDIRECTIVEPDU		437  /**/
#define ERR_UPER_DECODE_FILEDIRECTIVEPDU_EOF_PDU_2		282  /**/
#define ERR_UPER_DECODE_FILEDIRECTIVEPDU_FINISHED_PDU_2		322  /**/
#define ERR_UPER_DECODE_FILEDIRECTIVEPDU_ACK_PDU_2		372  /**/
#define ERR_UPER_DECODE_FILEDIRECTIVEPDU_METADATA_PDU_2		434  /**/
flag cfdpFileDirectivePDU_Decode(cfdpFileDirectivePDU* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- cfdpFileDirectiveType --------------------------------------------*/
typedef struct {
    cfdpFileDirectivePDU file_directive_pdu;

} cfdpFileDirectiveType;

flag cfdpFileDirectiveType_Equal(const cfdpFileDirectiveType* pVal1, const cfdpFileDirectiveType* pVal2);

#define ERR_FILEDIRECTIVETYPE		642  /**/
#define ERR_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_2		639  /**/
flag cfdpFileDirectiveType_IsConstraintValid(const cfdpFileDirectiveType* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpFileDirectiveType cfdpFileDirectiveType_constant;
#else
#define cfdpFileDirectiveType_constant {.file_directive_pdu = cfdpFileDirectivePDU_constant}
#endif

void cfdpFileDirectiveType_Initialize(cfdpFileDirectiveType* pVal);

#define ERR_UPER_ENCODE_FILEDIRECTIVETYPE		643  /**/
#define ERR_UPER_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_2		640  /**/
#define cfdpFileDirectiveType_REQUIRED_BYTES_FOR_ENCODING       71
#define cfdpFileDirectiveType_REQUIRED_BITS_FOR_ENCODING        563

flag cfdpFileDirectiveType_Encode(const cfdpFileDirectiveType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_FILEDIRECTIVETYPE		644  /**/
#define ERR_UPER_DECODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_2		641  /**/
flag cfdpFileDirectiveType_Decode(cfdpFileDirectiveType* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE		645  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_DIRECTIVE_CODE_UNINITIALIZED		646  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_DIRECTIVE_CODE		440  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU		637  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_EOF_PDU		477  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_EOF_PDU_CONDITION_CODE_2		450  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_EOF_PDU_SPARE		452  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_EOF_PDU_FILE_CHECKSUM_2		462  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_EOF_PDU_FILE_SIZE_2		472  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_FINISHED_PDU		517  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_FINISHED_PDU_CONDITION_CODE_2		490  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_FINISHED_PDU_END_SYSTEM_STATUS		492  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_FINISHED_PDU_DELIVERY_CODE_2		502  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_FINISHED_PDU_FILE_STATUS_2		512  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_ACK_PDU		567  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_ACK_PDU_DIRECTIVE_CODE_OF_ACK_PDU_2		530  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_ACK_PDU_DIRECTIVE_SUBTYPE_CODE_2		540  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_ACK_PDU_CONDITION_CODE_2		550  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_ACK_PDU_SPARE		552  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_ACK_PDU_TRANSACTION_STATUS_2		562  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_METADATA_PDU		629  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_METADATA_PDU_RESERVED1		572  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_METADATA_PDU_CLOSURE_REQUESTED_2		582  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_METADATA_PDU_RESERVED2		584  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_METADATA_PDU_CHECKSUM_TYPE_2		594  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_METADATA_PDU_FILE_SIZE_2		604  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_METADATA_PDU_SOURCE_FILE_NAME_SIZE_UNINITIALIZED		647  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_METADATA_PDU_SOURCE_FILE_NAME_SIZE		606  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_METADATA_PDU_SOURCE_FILE_NAME		611  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_METADATA_PDU_DESTINATION_FILE_NAME_SIZE_UNINITIALIZED		648  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_METADATA_PDU_DESTINATION_FILE_NAME_SIZE		616  /**/
#define ERR_ACN_ENCODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_METADATA_PDU_DESTINATION_FILE_NAME		621  /**/
#define cfdpFileDirectiveType_REQUIRED_BYTES_FOR_ACN_ENCODING       72
#define cfdpFileDirectiveType_REQUIRED_BITS_FOR_ACN_ENCODING        576

flag cfdpFileDirectiveType_ACN_Encode(const cfdpFileDirectiveType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_FILEDIRECTIVETYPE		649  /**/
#define ERR_ACN_DECODE_FILEDIRECTIVETYPE_DIRECTIVE_CODE		441  /**/
#define ERR_ACN_DECODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU		638  /**/
#define ERR_ACN_DECODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_EOF_PDU		478  /**/
#define ERR_ACN_DECODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_EOF_PDU_CONDITION_CODE_2		451  /**/
#define ERR_ACN_DECODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_EOF_PDU_SPARE		453  /**/
#define ERR_ACN_DECODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_EOF_PDU_FILE_CHECKSUM_2		463  /**/
#define ERR_ACN_DECODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_EOF_PDU_FILE_SIZE_2		473  /**/
#define ERR_ACN_DECODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_FINISHED_PDU		518  /**/
#define ERR_ACN_DECODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_FINISHED_PDU_CONDITION_CODE_2		491  /**/
#define ERR_ACN_DECODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_FINISHED_PDU_END_SYSTEM_STATUS		493  /**/
#define ERR_ACN_DECODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_FINISHED_PDU_DELIVERY_CODE_2		503  /**/
#define ERR_ACN_DECODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_FINISHED_PDU_FILE_STATUS_2		513  /**/
#define ERR_ACN_DECODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_ACK_PDU		568  /**/
#define ERR_ACN_DECODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_ACK_PDU_DIRECTIVE_CODE_OF_ACK_PDU_2		531  /**/
#define ERR_ACN_DECODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_ACK_PDU_DIRECTIVE_SUBTYPE_CODE_2		541  /**/
#define ERR_ACN_DECODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_ACK_PDU_CONDITION_CODE_2		551  /**/
#define ERR_ACN_DECODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_ACK_PDU_SPARE		553  /**/
#define ERR_ACN_DECODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_ACK_PDU_TRANSACTION_STATUS_2		563  /**/
#define ERR_ACN_DECODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_METADATA_PDU		630  /**/
#define ERR_ACN_DECODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_METADATA_PDU_RESERVED1		573  /**/
#define ERR_ACN_DECODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_METADATA_PDU_CLOSURE_REQUESTED_2		583  /**/
#define ERR_ACN_DECODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_METADATA_PDU_RESERVED2		585  /**/
#define ERR_ACN_DECODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_METADATA_PDU_CHECKSUM_TYPE_2		595  /**/
#define ERR_ACN_DECODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_METADATA_PDU_FILE_SIZE_2		605  /**/
#define ERR_ACN_DECODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_METADATA_PDU_SOURCE_FILE_NAME_SIZE		607  /**/
#define ERR_ACN_DECODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_METADATA_PDU_SOURCE_FILE_NAME		612  /**/
#define ERR_ACN_DECODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_METADATA_PDU_DESTINATION_FILE_NAME_SIZE		617  /**/
#define ERR_ACN_DECODE_FILEDIRECTIVETYPE_FILE_DIRECTIVE_PDU_METADATA_PDU_DESTINATION_FILE_NAME		622  /**/
flag cfdpFileDirectiveType_ACN_Decode(cfdpFileDirectiveType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint cfdpSegmentOffset;


flag cfdpSegmentOffset_Equal(const cfdpSegmentOffset* pVal1, const cfdpSegmentOffset* pVal2);

#define ERR_SEGMENTOFFSET		650  /*(0..4294967295)*/
flag cfdpSegmentOffset_IsConstraintValid(const cfdpSegmentOffset* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpSegmentOffset cfdpSegmentOffset_constant;
#else
#define cfdpSegmentOffset_constant 0UL
#endif

void cfdpSegmentOffset_Initialize(cfdpSegmentOffset* pVal);

#define ERR_UPER_ENCODE_SEGMENTOFFSET		651  /**/
#define cfdpSegmentOffset_REQUIRED_BYTES_FOR_ENCODING       4
#define cfdpSegmentOffset_REQUIRED_BITS_FOR_ENCODING        32

flag cfdpSegmentOffset_Encode(const cfdpSegmentOffset* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SEGMENTOFFSET		652  /**/
flag cfdpSegmentOffset_Decode(cfdpSegmentOffset* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_SEGMENTOFFSET		653  /**/
#define cfdpSegmentOffset_REQUIRED_BYTES_FOR_ACN_ENCODING       4
#define cfdpSegmentOffset_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag cfdpSegmentOffset_ACN_Encode(const cfdpSegmentOffset* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_SEGMENTOFFSET		654  /**/
flag cfdpSegmentOffset_ACN_Decode(cfdpSegmentOffset* pVal, BitStream* pBitStrm, int* pErrCode);
typedef struct {
    int nCount;
    byte arr[254];
} cfdpFileData;


flag cfdpFileData_Equal(const cfdpFileData* pVal1, const cfdpFileData* pVal2);

#define ERR_FILEDATA		655  /*(SIZE(0..254))*/
flag cfdpFileData_IsConstraintValid(const cfdpFileData* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpFileData cfdpFileData_constant;
#else
#define cfdpFileData_constant {.nCount = 0, .arr  = {[0 ... 254-1] = 0 }}
#endif

void cfdpFileData_Initialize(cfdpFileData* pVal);

#define ERR_UPER_ENCODE_FILEDATA		656  /**/
#define cfdpFileData_REQUIRED_BYTES_FOR_ENCODING       255
#define cfdpFileData_REQUIRED_BITS_FOR_ENCODING        2040

flag cfdpFileData_Encode(const cfdpFileData* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_FILEDATA		657  /**/
flag cfdpFileData_Decode(cfdpFileData* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_FILEDATA		658  /**/
#define cfdpFileData_REQUIRED_BYTES_FOR_ACN_ENCODING       255
#define cfdpFileData_REQUIRED_BITS_FOR_ACN_ENCODING        2040

flag cfdpFileData_ACN_Encode(const cfdpFileData* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_FILEDATA		659  /**/
flag cfdpFileData_ACN_Decode(cfdpFileData* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- cfdpFileDataPDU --------------------------------------------*/
typedef struct {
    cfdpSegmentOffset segment_offset;
    cfdpFileData file_data;

} cfdpFileDataPDU;

flag cfdpFileDataPDU_Equal(const cfdpFileDataPDU* pVal1, const cfdpFileDataPDU* pVal2);

#define ERR_FILEDATAPDU		680  /**/
#define ERR_FILEDATAPDU_SEGMENT_OFFSET_2		665  /**/
#define ERR_FILEDATAPDU_FILE_DATA_2		675  /**/
flag cfdpFileDataPDU_IsConstraintValid(const cfdpFileDataPDU* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpFileDataPDU cfdpFileDataPDU_constant;
#else
#define cfdpFileDataPDU_constant {.segment_offset = 0UL, .file_data = {.nCount = 0, .arr  = {[0 ... 254-1] = 0 }}}
#endif

void cfdpFileDataPDU_Initialize(cfdpFileDataPDU* pVal);

#define ERR_UPER_ENCODE_FILEDATAPDU		681  /**/
#define ERR_UPER_ENCODE_FILEDATAPDU_SEGMENT_OFFSET_2		666  /**/
#define ERR_UPER_ENCODE_FILEDATAPDU_FILE_DATA_2		676  /**/
#define cfdpFileDataPDU_REQUIRED_BYTES_FOR_ENCODING       259
#define cfdpFileDataPDU_REQUIRED_BITS_FOR_ENCODING        2072

flag cfdpFileDataPDU_Encode(const cfdpFileDataPDU* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_FILEDATAPDU		682  /**/
#define ERR_UPER_DECODE_FILEDATAPDU_SEGMENT_OFFSET_2		667  /**/
#define ERR_UPER_DECODE_FILEDATAPDU_FILE_DATA_2		677  /**/
flag cfdpFileDataPDU_Decode(cfdpFileDataPDU* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_FILEDATAPDU		683  /**/
#define ERR_ACN_ENCODE_FILEDATAPDU_SEGMENT_OFFSET_2		668  /**/
#define ERR_ACN_ENCODE_FILEDATAPDU_FILE_DATA_2		678  /**/
#define cfdpFileDataPDU_REQUIRED_BYTES_FOR_ACN_ENCODING       259
#define cfdpFileDataPDU_REQUIRED_BITS_FOR_ACN_ENCODING        2072

flag cfdpFileDataPDU_ACN_Encode(const cfdpFileDataPDU* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_FILEDATAPDU		684  /**/
#define ERR_ACN_DECODE_FILEDATAPDU_SEGMENT_OFFSET_2		669  /**/
#define ERR_ACN_DECODE_FILEDATAPDU_FILE_DATA_2		679  /**/
flag cfdpFileDataPDU_ACN_Decode(cfdpFileDataPDU* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- cfdpFileDataType --------------------------------------------*/
typedef struct {
    cfdpFileDataPDU file_data_pdu;

} cfdpFileDataType;

flag cfdpFileDataType_Equal(const cfdpFileDataType* pVal1, const cfdpFileDataType* pVal2);

#define ERR_FILEDATATYPE		690  /**/
#define ERR_FILEDATATYPE_FILE_DATA_PDU		685  /**/
flag cfdpFileDataType_IsConstraintValid(const cfdpFileDataType* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpFileDataType cfdpFileDataType_constant;
#else
#define cfdpFileDataType_constant {.file_data_pdu = cfdpFileDataPDU_constant}
#endif

void cfdpFileDataType_Initialize(cfdpFileDataType* pVal);

#define ERR_UPER_ENCODE_FILEDATATYPE		691  /**/
#define ERR_UPER_ENCODE_FILEDATATYPE_FILE_DATA_PDU		686  /**/
#define cfdpFileDataType_REQUIRED_BYTES_FOR_ENCODING       259
#define cfdpFileDataType_REQUIRED_BITS_FOR_ENCODING        2072

flag cfdpFileDataType_Encode(const cfdpFileDataType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_FILEDATATYPE		692  /**/
#define ERR_UPER_DECODE_FILEDATATYPE_FILE_DATA_PDU		687  /**/
flag cfdpFileDataType_Decode(cfdpFileDataType* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_FILEDATATYPE		693  /**/
#define ERR_ACN_ENCODE_FILEDATATYPE_FILE_DATA_PDU		688  /**/
#define cfdpFileDataType_REQUIRED_BYTES_FOR_ACN_ENCODING       259
#define cfdpFileDataType_REQUIRED_BITS_FOR_ACN_ENCODING        2072

flag cfdpFileDataType_ACN_Encode(const cfdpFileDataType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_FILEDATATYPE		694  /**/
#define ERR_ACN_DECODE_FILEDATATYPE_FILE_DATA_PDU		689  /**/
flag cfdpFileDataType_ACN_Decode(cfdpFileDataType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    ResponseRequired_nak = 0,
    ResponseRequired_keep_alive = 1
} cfdpResponseRequired;

// please use the following macros to avoid breaking code.
#define cfdpResponseRequired_nak ResponseRequired_nak
#define cfdpResponseRequired_keep_alive ResponseRequired_keep_alive

flag cfdpResponseRequired_Equal(const cfdpResponseRequired* pVal1, const cfdpResponseRequired* pVal2);

#define ERR_RESPONSEREQUIRED		695  /*nak | keep-alive*/
flag cfdpResponseRequired_IsConstraintValid(const cfdpResponseRequired* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpResponseRequired cfdpResponseRequired_constant;
#else
#define cfdpResponseRequired_constant ResponseRequired_nak
#endif

void cfdpResponseRequired_Initialize(cfdpResponseRequired* pVal);

#define ERR_UPER_ENCODE_RESPONSEREQUIRED		696  /**/
#define cfdpResponseRequired_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpResponseRequired_REQUIRED_BITS_FOR_ENCODING        1

flag cfdpResponseRequired_Encode(const cfdpResponseRequired* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_RESPONSEREQUIRED		697  /**/
flag cfdpResponseRequired_Decode(cfdpResponseRequired* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_RESPONSEREQUIRED		698  /**/
#define cfdpResponseRequired_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpResponseRequired_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag cfdpResponseRequired_ACN_Encode(const cfdpResponseRequired* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_RESPONSEREQUIRED		699  /**/
flag cfdpResponseRequired_ACN_Decode(cfdpResponseRequired* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint cfdpProgress;


flag cfdpProgress_Equal(const cfdpProgress* pVal1, const cfdpProgress* pVal2);

#define ERR_PROGRESS		700  /*(0..4294967295)*/
flag cfdpProgress_IsConstraintValid(const cfdpProgress* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpProgress cfdpProgress_constant;
#else
#define cfdpProgress_constant 0UL
#endif

void cfdpProgress_Initialize(cfdpProgress* pVal);

#define ERR_UPER_ENCODE_PROGRESS		701  /**/
#define cfdpProgress_REQUIRED_BYTES_FOR_ENCODING       4
#define cfdpProgress_REQUIRED_BITS_FOR_ENCODING        32

flag cfdpProgress_Encode(const cfdpProgress* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PROGRESS		702  /**/
flag cfdpProgress_Decode(cfdpProgress* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PROGRESS		703  /**/
#define cfdpProgress_REQUIRED_BYTES_FOR_ACN_ENCODING       4
#define cfdpProgress_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag cfdpProgress_ACN_Encode(const cfdpProgress* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PROGRESS		704  /**/
flag cfdpProgress_ACN_Decode(cfdpProgress* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    TransactionStatus_discarted_deliberately = 0,
    TransactionStatus_discarted_file_rejection = 1,
    TransactionStatus_retained_successfully = 2,
    TransactionStatus_unreported = 3
} cfdpTransactionStatus;

// please use the following macros to avoid breaking code.
#define cfdpTransactionStatus_discarted_deliberately TransactionStatus_discarted_deliberately
#define cfdpTransactionStatus_discarted_file_rejection TransactionStatus_discarted_file_rejection
#define cfdpTransactionStatus_retained_successfully TransactionStatus_retained_successfully
#define cfdpTransactionStatus_unreported TransactionStatus_unreported

flag cfdpTransactionStatus_Equal(const cfdpTransactionStatus* pVal1, const cfdpTransactionStatus* pVal2);

#define ERR_TRANSACTIONSTATUS		705  /*discarted-deliberately | discarted-file-rejection | retained-successfully | unreported*/
flag cfdpTransactionStatus_IsConstraintValid(const cfdpTransactionStatus* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpTransactionStatus cfdpTransactionStatus_constant;
#else
#define cfdpTransactionStatus_constant TransactionStatus_discarted_deliberately
#endif

void cfdpTransactionStatus_Initialize(cfdpTransactionStatus* pVal);

#define ERR_UPER_ENCODE_TRANSACTIONSTATUS		706  /**/
#define cfdpTransactionStatus_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpTransactionStatus_REQUIRED_BITS_FOR_ENCODING        2

flag cfdpTransactionStatus_Encode(const cfdpTransactionStatus* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TRANSACTIONSTATUS		707  /**/
flag cfdpTransactionStatus_Decode(cfdpTransactionStatus* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TRANSACTIONSTATUS		708  /**/
#define cfdpTransactionStatus_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpTransactionStatus_REQUIRED_BITS_FOR_ACN_ENCODING        2

flag cfdpTransactionStatus_ACN_Encode(const cfdpTransactionStatus* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TRANSACTIONSTATUS		709  /**/
flag cfdpTransactionStatus_ACN_Decode(cfdpTransactionStatus* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    TypeFieldCode_filestore_request = 0,
    TypeFieldCode_filestore_response = 1,
    TypeFieldCode_message_to_user = 2,
    TypeFieldCode_fault_handler_overrides = 4,
    TypeFieldCode_flow_label = 5,
    TypeFieldCode_entity_id = 6
} cfdpTypeFieldCode;

// please use the following macros to avoid breaking code.
#define cfdpTypeFieldCode_filestore_request TypeFieldCode_filestore_request
#define cfdpTypeFieldCode_filestore_response TypeFieldCode_filestore_response
#define cfdpTypeFieldCode_message_to_user TypeFieldCode_message_to_user
#define cfdpTypeFieldCode_fault_handler_overrides TypeFieldCode_fault_handler_overrides
#define cfdpTypeFieldCode_flow_label TypeFieldCode_flow_label
#define cfdpTypeFieldCode_entity_id TypeFieldCode_entity_id

flag cfdpTypeFieldCode_Equal(const cfdpTypeFieldCode* pVal1, const cfdpTypeFieldCode* pVal2);

#define ERR_TYPEFIELDCODE		710  /*filestore-request | filestore-response | message-to-user | fault-handler-overrides | flow-label | entity-id*/
flag cfdpTypeFieldCode_IsConstraintValid(const cfdpTypeFieldCode* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpTypeFieldCode cfdpTypeFieldCode_constant;
#else
#define cfdpTypeFieldCode_constant TypeFieldCode_filestore_request
#endif

void cfdpTypeFieldCode_Initialize(cfdpTypeFieldCode* pVal);

#define ERR_UPER_ENCODE_TYPEFIELDCODE		711  /**/
#define cfdpTypeFieldCode_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpTypeFieldCode_REQUIRED_BITS_FOR_ENCODING        3

flag cfdpTypeFieldCode_Encode(const cfdpTypeFieldCode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TYPEFIELDCODE		712  /**/
flag cfdpTypeFieldCode_Decode(cfdpTypeFieldCode* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TYPEFIELDCODE		713  /**/
#define cfdpTypeFieldCode_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpTypeFieldCode_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag cfdpTypeFieldCode_ACN_Encode(const cfdpTypeFieldCode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TYPEFIELDCODE		714  /**/
flag cfdpTypeFieldCode_ACN_Decode(cfdpTypeFieldCode* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    MessageType_proxy_put_request = 0,
    MessageType_proxy_message_to_user = 1,
    MessageType_proxy_filestore_request = 2,
    MessageType_proxy_fault_handler_override = 3,
    MessageType_proxy_transmission_mode = 4,
    MessageType_proxy_flow_label = 5,
    MessageType_proxy_segmentation_control = 6,
    MessageType_proxy_put_response = 7,
    MessageType_proxy_filestore_response = 8,
    MessageType_proxy_put_cancel = 9,
    MessageType_directory_listing_request = 16,
    MessageType_directory_listing_response = 17,
    MessageType_remote_status_report_request = 32,
    MessageType_remote_status_report_response = 33,
    MessageType_remote_suspend_request = 48,
    MessageType_remote_suspend_response = 49,
    MessageType_remote_resume_request = 56,
    MessageType_remote_resume_response = 57
} cfdpMessageType;

// please use the following macros to avoid breaking code.
#define cfdpMessageType_proxy_put_request MessageType_proxy_put_request
#define cfdpMessageType_proxy_message_to_user MessageType_proxy_message_to_user
#define cfdpMessageType_proxy_filestore_request MessageType_proxy_filestore_request
#define cfdpMessageType_proxy_fault_handler_override MessageType_proxy_fault_handler_override
#define cfdpMessageType_proxy_transmission_mode MessageType_proxy_transmission_mode
#define cfdpMessageType_proxy_flow_label MessageType_proxy_flow_label
#define cfdpMessageType_proxy_segmentation_control MessageType_proxy_segmentation_control
#define cfdpMessageType_proxy_put_response MessageType_proxy_put_response
#define cfdpMessageType_proxy_filestore_response MessageType_proxy_filestore_response
#define cfdpMessageType_proxy_put_cancel MessageType_proxy_put_cancel
#define cfdpMessageType_directory_listing_request MessageType_directory_listing_request
#define cfdpMessageType_directory_listing_response MessageType_directory_listing_response
#define cfdpMessageType_remote_status_report_request MessageType_remote_status_report_request
#define cfdpMessageType_remote_status_report_response MessageType_remote_status_report_response
#define cfdpMessageType_remote_suspend_request MessageType_remote_suspend_request
#define cfdpMessageType_remote_suspend_response MessageType_remote_suspend_response
#define cfdpMessageType_remote_resume_request MessageType_remote_resume_request
#define cfdpMessageType_remote_resume_response MessageType_remote_resume_response

flag cfdpMessageType_Equal(const cfdpMessageType* pVal1, const cfdpMessageType* pVal2);

#define ERR_MESSAGETYPE		715  /*proxy-put-request | proxy-message-to-user | proxy-filestore-request | proxy-fault-handler-override | proxy-transmission-mode | proxy-flow-label | proxy-segmentation-control | proxy-put-response | proxy-filestore-response | proxy-put-cancel | directory-listing-request | directory-listing-response | remote-status-report-request | remote-status-report-response | remote-suspend-request | remote-suspend-response | remote-resume-request | remote-resume-response*/
flag cfdpMessageType_IsConstraintValid(const cfdpMessageType* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpMessageType cfdpMessageType_constant;
#else
#define cfdpMessageType_constant MessageType_proxy_put_request
#endif

void cfdpMessageType_Initialize(cfdpMessageType* pVal);

#define ERR_UPER_ENCODE_MESSAGETYPE		716  /**/
#define cfdpMessageType_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpMessageType_REQUIRED_BITS_FOR_ENCODING        5

flag cfdpMessageType_Encode(const cfdpMessageType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MESSAGETYPE		717  /**/
flag cfdpMessageType_Decode(cfdpMessageType* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MESSAGETYPE		718  /**/
#define cfdpMessageType_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpMessageType_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag cfdpMessageType_ACN_Encode(const cfdpMessageType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MESSAGETYPE		719  /**/
flag cfdpMessageType_ACN_Decode(cfdpMessageType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint cfdpProtocolVersion;


flag cfdpProtocolVersion_Equal(const cfdpProtocolVersion* pVal1, const cfdpProtocolVersion* pVal2);

#define ERR_PROTOCOLVERSION		720  /*(0 .. 7)*/
flag cfdpProtocolVersion_IsConstraintValid(const cfdpProtocolVersion* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpProtocolVersion cfdpProtocolVersion_constant;
#else
#define cfdpProtocolVersion_constant 0UL
#endif

void cfdpProtocolVersion_Initialize(cfdpProtocolVersion* pVal);

#define ERR_UPER_ENCODE_PROTOCOLVERSION		721  /**/
#define cfdpProtocolVersion_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpProtocolVersion_REQUIRED_BITS_FOR_ENCODING        3

flag cfdpProtocolVersion_Encode(const cfdpProtocolVersion* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PROTOCOLVERSION		722  /**/
flag cfdpProtocolVersion_Decode(cfdpProtocolVersion* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PROTOCOLVERSION		723  /**/
#define cfdpProtocolVersion_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpProtocolVersion_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag cfdpProtocolVersion_ACN_Encode(const cfdpProtocolVersion* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PROTOCOLVERSION		724  /**/
flag cfdpProtocolVersion_ACN_Decode(cfdpProtocolVersion* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint cfdpPDUType;


flag cfdpPDUType_Equal(const cfdpPDUType* pVal1, const cfdpPDUType* pVal2);

#define ERR_PDUTYPE		725  /*(0 .. 1)*/
flag cfdpPDUType_IsConstraintValid(const cfdpPDUType* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpPDUType cfdpPDUType_constant;
#else
#define cfdpPDUType_constant 0UL
#endif

void cfdpPDUType_Initialize(cfdpPDUType* pVal);

#define ERR_UPER_ENCODE_PDUTYPE		726  /**/
#define cfdpPDUType_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpPDUType_REQUIRED_BITS_FOR_ENCODING        1

flag cfdpPDUType_Encode(const cfdpPDUType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PDUTYPE		727  /**/
flag cfdpPDUType_Decode(cfdpPDUType* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PDUTYPE		728  /**/
#define cfdpPDUType_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpPDUType_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag cfdpPDUType_ACN_Encode(const cfdpPDUType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PDUTYPE		729  /**/
flag cfdpPDUType_ACN_Decode(cfdpPDUType* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- cfdpPayload --------------------------------------------*/

typedef enum {
    Payload_NONE,
    Payload_file_directive_PRESENT,
    Payload_file_data_PRESENT
} cfdpPayload_selection;

typedef union {
    cfdpFileDirectiveType file_directive;
    cfdpFileDataType file_data;
} cfdpPayload_unchecked_union;

typedef struct {
    cfdpPayload_selection kind;

    cfdpPayload_unchecked_union u;
} cfdpPayload;

flag cfdpPayload_Equal(const cfdpPayload* pVal1, const cfdpPayload* pVal2);

#define ERR_PAYLOAD		953  /**/
#define ERR_PAYLOAD_FILE_DIRECTIVE_2		937  /**/
#define ERR_PAYLOAD_FILE_DATA_2		950  /**/
flag cfdpPayload_IsConstraintValid(const cfdpPayload* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpPayload cfdpPayload_constant;
#else
#define cfdpPayload_constant {.kind = Payload_file_directive_PRESENT, .u.file_directive = cfdpFileDirectiveType_constant}
#endif

void cfdpPayload_Initialize(cfdpPayload* pVal);

#define ERR_UPER_ENCODE_PAYLOAD		954  /**/
#define ERR_UPER_ENCODE_PAYLOAD_FILE_DIRECTIVE_2		938  /**/
#define ERR_UPER_ENCODE_PAYLOAD_FILE_DATA_2		951  /**/
#define cfdpPayload_REQUIRED_BYTES_FOR_ENCODING       260
#define cfdpPayload_REQUIRED_BITS_FOR_ENCODING        2073

flag cfdpPayload_Encode(const cfdpPayload* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PAYLOAD		955  /**/
#define ERR_UPER_DECODE_PAYLOAD_FILE_DIRECTIVE_2		939  /**/
#define ERR_UPER_DECODE_PAYLOAD_FILE_DATA_2		952  /**/
flag cfdpPayload_Decode(cfdpPayload* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    Direction_toward_receiver = 0,
    Direction_toward_sender = 1
} cfdpDirection;

// please use the following macros to avoid breaking code.
#define cfdpDirection_toward_receiver Direction_toward_receiver
#define cfdpDirection_toward_sender Direction_toward_sender

flag cfdpDirection_Equal(const cfdpDirection* pVal1, const cfdpDirection* pVal2);

#define ERR_DIRECTION		958  /*toward-receiver | toward-sender*/
flag cfdpDirection_IsConstraintValid(const cfdpDirection* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpDirection cfdpDirection_constant;
#else
#define cfdpDirection_constant Direction_toward_receiver
#endif

void cfdpDirection_Initialize(cfdpDirection* pVal);

#define ERR_UPER_ENCODE_DIRECTION		959  /**/
#define cfdpDirection_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpDirection_REQUIRED_BITS_FOR_ENCODING        1

flag cfdpDirection_Encode(const cfdpDirection* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_DIRECTION		960  /**/
flag cfdpDirection_Decode(cfdpDirection* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_DIRECTION		961  /**/
#define cfdpDirection_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpDirection_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag cfdpDirection_ACN_Encode(const cfdpDirection* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_DIRECTION		962  /**/
flag cfdpDirection_ACN_Decode(cfdpDirection* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    TransmissionMode_acknowledged = 0,
    TransmissionMode_unacknowledged = 1
} cfdpTransmissionMode;

// please use the following macros to avoid breaking code.
#define cfdpTransmissionMode_acknowledged TransmissionMode_acknowledged
#define cfdpTransmissionMode_unacknowledged TransmissionMode_unacknowledged

flag cfdpTransmissionMode_Equal(const cfdpTransmissionMode* pVal1, const cfdpTransmissionMode* pVal2);

#define ERR_TRANSMISSIONMODE		963  /*acknowledged | unacknowledged*/
flag cfdpTransmissionMode_IsConstraintValid(const cfdpTransmissionMode* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpTransmissionMode cfdpTransmissionMode_constant;
#else
#define cfdpTransmissionMode_constant TransmissionMode_acknowledged
#endif

void cfdpTransmissionMode_Initialize(cfdpTransmissionMode* pVal);

#define ERR_UPER_ENCODE_TRANSMISSIONMODE		964  /**/
#define cfdpTransmissionMode_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpTransmissionMode_REQUIRED_BITS_FOR_ENCODING        1

flag cfdpTransmissionMode_Encode(const cfdpTransmissionMode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TRANSMISSIONMODE		965  /**/
flag cfdpTransmissionMode_Decode(cfdpTransmissionMode* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TRANSMISSIONMODE		966  /**/
#define cfdpTransmissionMode_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpTransmissionMode_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag cfdpTransmissionMode_ACN_Encode(const cfdpTransmissionMode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TRANSMISSIONMODE		967  /**/
flag cfdpTransmissionMode_ACN_Decode(cfdpTransmissionMode* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    CRCFlag_crc_not_present = 0,
    CRCFlag_crc_present = 1
} cfdpCRCFlag;

// please use the following macros to avoid breaking code.
#define cfdpCRCFlag_crc_not_present CRCFlag_crc_not_present
#define cfdpCRCFlag_crc_present CRCFlag_crc_present

flag cfdpCRCFlag_Equal(const cfdpCRCFlag* pVal1, const cfdpCRCFlag* pVal2);

#define ERR_CRCFLAG		968  /*crc-not-present | crc-present*/
flag cfdpCRCFlag_IsConstraintValid(const cfdpCRCFlag* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpCRCFlag cfdpCRCFlag_constant;
#else
#define cfdpCRCFlag_constant CRCFlag_crc_not_present
#endif

void cfdpCRCFlag_Initialize(cfdpCRCFlag* pVal);

#define ERR_UPER_ENCODE_CRCFLAG		969  /**/
#define cfdpCRCFlag_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpCRCFlag_REQUIRED_BITS_FOR_ENCODING        1

flag cfdpCRCFlag_Encode(const cfdpCRCFlag* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_CRCFLAG		970  /**/
flag cfdpCRCFlag_Decode(cfdpCRCFlag* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_CRCFLAG		971  /**/
#define cfdpCRCFlag_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpCRCFlag_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag cfdpCRCFlag_ACN_Encode(const cfdpCRCFlag* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_CRCFLAG		972  /**/
flag cfdpCRCFlag_ACN_Decode(cfdpCRCFlag* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint cfdpLargeFileFlag;


flag cfdpLargeFileFlag_Equal(const cfdpLargeFileFlag* pVal1, const cfdpLargeFileFlag* pVal2);

#define ERR_LARGEFILEFLAG		973  /*(0..1)*/
flag cfdpLargeFileFlag_IsConstraintValid(const cfdpLargeFileFlag* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpLargeFileFlag cfdpLargeFileFlag_constant;
#else
#define cfdpLargeFileFlag_constant 0UL
#endif

void cfdpLargeFileFlag_Initialize(cfdpLargeFileFlag* pVal);

#define ERR_UPER_ENCODE_LARGEFILEFLAG		974  /**/
#define cfdpLargeFileFlag_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpLargeFileFlag_REQUIRED_BITS_FOR_ENCODING        1

flag cfdpLargeFileFlag_Encode(const cfdpLargeFileFlag* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_LARGEFILEFLAG		975  /**/
flag cfdpLargeFileFlag_Decode(cfdpLargeFileFlag* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_LARGEFILEFLAG		976  /**/
#define cfdpLargeFileFlag_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpLargeFileFlag_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag cfdpLargeFileFlag_ACN_Encode(const cfdpLargeFileFlag* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_LARGEFILEFLAG		977  /**/
flag cfdpLargeFileFlag_ACN_Decode(cfdpLargeFileFlag* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint cfdpPDUDataFieldLength;


flag cfdpPDUDataFieldLength_Equal(const cfdpPDUDataFieldLength* pVal1, const cfdpPDUDataFieldLength* pVal2);

#define ERR_PDUDATAFIELDLENGTH		978  /*(0 .. 65535)*/
flag cfdpPDUDataFieldLength_IsConstraintValid(const cfdpPDUDataFieldLength* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpPDUDataFieldLength cfdpPDUDataFieldLength_constant;
#else
#define cfdpPDUDataFieldLength_constant 0UL
#endif

void cfdpPDUDataFieldLength_Initialize(cfdpPDUDataFieldLength* pVal);

#define ERR_UPER_ENCODE_PDUDATAFIELDLENGTH		979  /**/
#define cfdpPDUDataFieldLength_REQUIRED_BYTES_FOR_ENCODING       2
#define cfdpPDUDataFieldLength_REQUIRED_BITS_FOR_ENCODING        16

flag cfdpPDUDataFieldLength_Encode(const cfdpPDUDataFieldLength* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PDUDATAFIELDLENGTH		980  /**/
flag cfdpPDUDataFieldLength_Decode(cfdpPDUDataFieldLength* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PDUDATAFIELDLENGTH		981  /**/
#define cfdpPDUDataFieldLength_REQUIRED_BYTES_FOR_ACN_ENCODING       2
#define cfdpPDUDataFieldLength_REQUIRED_BITS_FOR_ACN_ENCODING        16

flag cfdpPDUDataFieldLength_ACN_Encode(const cfdpPDUDataFieldLength* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PDUDATAFIELDLENGTH		982  /**/
flag cfdpPDUDataFieldLength_ACN_Decode(cfdpPDUDataFieldLength* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    SegmentationControl_record_boundries_not_preserved = 0,
    SegmentationControl_record_boundries_preserved = 1
} cfdpSegmentationControl;

// please use the following macros to avoid breaking code.
#define cfdpSegmentationControl_record_boundries_not_preserved SegmentationControl_record_boundries_not_preserved
#define cfdpSegmentationControl_record_boundries_preserved SegmentationControl_record_boundries_preserved

flag cfdpSegmentationControl_Equal(const cfdpSegmentationControl* pVal1, const cfdpSegmentationControl* pVal2);

#define ERR_SEGMENTATIONCONTROL		983  /*record-boundries-not-preserved | record-boundries-preserved*/
flag cfdpSegmentationControl_IsConstraintValid(const cfdpSegmentationControl* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpSegmentationControl cfdpSegmentationControl_constant;
#else
#define cfdpSegmentationControl_constant SegmentationControl_record_boundries_not_preserved
#endif

void cfdpSegmentationControl_Initialize(cfdpSegmentationControl* pVal);

#define ERR_UPER_ENCODE_SEGMENTATIONCONTROL		984  /**/
#define cfdpSegmentationControl_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpSegmentationControl_REQUIRED_BITS_FOR_ENCODING        1

flag cfdpSegmentationControl_Encode(const cfdpSegmentationControl* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SEGMENTATIONCONTROL		985  /**/
flag cfdpSegmentationControl_Decode(cfdpSegmentationControl* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_SEGMENTATIONCONTROL		986  /**/
#define cfdpSegmentationControl_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpSegmentationControl_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag cfdpSegmentationControl_ACN_Encode(const cfdpSegmentationControl* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_SEGMENTATIONCONTROL		987  /**/
flag cfdpSegmentationControl_ACN_Decode(cfdpSegmentationControl* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint cfdpLengthOfEntityIds;


flag cfdpLengthOfEntityIds_Equal(const cfdpLengthOfEntityIds* pVal1, const cfdpLengthOfEntityIds* pVal2);

#define ERR_LENGTHOFENTITYIDS		988  /*(0 .. 7)*/
flag cfdpLengthOfEntityIds_IsConstraintValid(const cfdpLengthOfEntityIds* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpLengthOfEntityIds cfdpLengthOfEntityIds_constant;
#else
#define cfdpLengthOfEntityIds_constant 0UL
#endif

void cfdpLengthOfEntityIds_Initialize(cfdpLengthOfEntityIds* pVal);

#define ERR_UPER_ENCODE_LENGTHOFENTITYIDS		989  /**/
#define cfdpLengthOfEntityIds_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpLengthOfEntityIds_REQUIRED_BITS_FOR_ENCODING        3

flag cfdpLengthOfEntityIds_Encode(const cfdpLengthOfEntityIds* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_LENGTHOFENTITYIDS		990  /**/
flag cfdpLengthOfEntityIds_Decode(cfdpLengthOfEntityIds* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_LENGTHOFENTITYIDS		991  /**/
#define cfdpLengthOfEntityIds_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpLengthOfEntityIds_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag cfdpLengthOfEntityIds_ACN_Encode(const cfdpLengthOfEntityIds* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_LENGTHOFENTITYIDS		992  /**/
flag cfdpLengthOfEntityIds_ACN_Decode(cfdpLengthOfEntityIds* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    SegmentMetadataFlag_flag_present = 0,
    SegmentMetadataFlag_flag_not_present = 1
} cfdpSegmentMetadataFlag;

// please use the following macros to avoid breaking code.
#define cfdpSegmentMetadataFlag_flag_present SegmentMetadataFlag_flag_present
#define cfdpSegmentMetadataFlag_flag_not_present SegmentMetadataFlag_flag_not_present

flag cfdpSegmentMetadataFlag_Equal(const cfdpSegmentMetadataFlag* pVal1, const cfdpSegmentMetadataFlag* pVal2);

#define ERR_SEGMENTMETADATAFLAG		993  /*flag-present | flag-not-present*/
flag cfdpSegmentMetadataFlag_IsConstraintValid(const cfdpSegmentMetadataFlag* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpSegmentMetadataFlag cfdpSegmentMetadataFlag_constant;
#else
#define cfdpSegmentMetadataFlag_constant SegmentMetadataFlag_flag_present
#endif

void cfdpSegmentMetadataFlag_Initialize(cfdpSegmentMetadataFlag* pVal);

#define ERR_UPER_ENCODE_SEGMENTMETADATAFLAG		994  /**/
#define cfdpSegmentMetadataFlag_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpSegmentMetadataFlag_REQUIRED_BITS_FOR_ENCODING        1

flag cfdpSegmentMetadataFlag_Encode(const cfdpSegmentMetadataFlag* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SEGMENTMETADATAFLAG		995  /**/
flag cfdpSegmentMetadataFlag_Decode(cfdpSegmentMetadataFlag* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_SEGMENTMETADATAFLAG		996  /**/
#define cfdpSegmentMetadataFlag_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpSegmentMetadataFlag_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag cfdpSegmentMetadataFlag_ACN_Encode(const cfdpSegmentMetadataFlag* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_SEGMENTMETADATAFLAG		997  /**/
flag cfdpSegmentMetadataFlag_ACN_Decode(cfdpSegmentMetadataFlag* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint cfdpLengthOfTransactionSequenceNumber;


flag cfdpLengthOfTransactionSequenceNumber_Equal(const cfdpLengthOfTransactionSequenceNumber* pVal1, const cfdpLengthOfTransactionSequenceNumber* pVal2);

#define ERR_LENGTHOFTRANSACTIONSEQUENCENUMBER		998  /*(0 .. 7)*/
flag cfdpLengthOfTransactionSequenceNumber_IsConstraintValid(const cfdpLengthOfTransactionSequenceNumber* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpLengthOfTransactionSequenceNumber cfdpLengthOfTransactionSequenceNumber_constant;
#else
#define cfdpLengthOfTransactionSequenceNumber_constant 0UL
#endif

void cfdpLengthOfTransactionSequenceNumber_Initialize(cfdpLengthOfTransactionSequenceNumber* pVal);

#define ERR_UPER_ENCODE_LENGTHOFTRANSACTIONSEQUENCENUMBER		999  /**/
#define cfdpLengthOfTransactionSequenceNumber_REQUIRED_BYTES_FOR_ENCODING       1
#define cfdpLengthOfTransactionSequenceNumber_REQUIRED_BITS_FOR_ENCODING        3

flag cfdpLengthOfTransactionSequenceNumber_Encode(const cfdpLengthOfTransactionSequenceNumber* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_LENGTHOFTRANSACTIONSEQUENCENUMBER		1000  /**/
flag cfdpLengthOfTransactionSequenceNumber_Decode(cfdpLengthOfTransactionSequenceNumber* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_LENGTHOFTRANSACTIONSEQUENCENUMBER		1001  /**/
#define cfdpLengthOfTransactionSequenceNumber_REQUIRED_BYTES_FOR_ACN_ENCODING       1
#define cfdpLengthOfTransactionSequenceNumber_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag cfdpLengthOfTransactionSequenceNumber_ACN_Encode(const cfdpLengthOfTransactionSequenceNumber* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_LENGTHOFTRANSACTIONSEQUENCENUMBER		1002  /**/
flag cfdpLengthOfTransactionSequenceNumber_ACN_Decode(cfdpLengthOfTransactionSequenceNumber* pVal, BitStream* pBitStrm, int* pErrCode);
typedef struct {
    int nCount;
    byte arr[7];
} cfdpEntityId;


flag cfdpEntityId_Equal(const cfdpEntityId* pVal1, const cfdpEntityId* pVal2);

#define ERR_ENTITYID		1003  /*(SIZE(1..7))*/
flag cfdpEntityId_IsConstraintValid(const cfdpEntityId* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpEntityId cfdpEntityId_constant;
#else
#define cfdpEntityId_constant {.nCount = 1, .arr  = {[0 ... 7-1] = 0 }}
#endif

void cfdpEntityId_Initialize(cfdpEntityId* pVal);

#define ERR_UPER_ENCODE_ENTITYID		1004  /**/
#define cfdpEntityId_REQUIRED_BYTES_FOR_ENCODING       8
#define cfdpEntityId_REQUIRED_BITS_FOR_ENCODING        59

flag cfdpEntityId_Encode(const cfdpEntityId* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ENTITYID		1005  /**/
flag cfdpEntityId_Decode(cfdpEntityId* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_ENTITYID		1006  /**/
#define cfdpEntityId_REQUIRED_BYTES_FOR_ACN_ENCODING       8
#define cfdpEntityId_REQUIRED_BITS_FOR_ACN_ENCODING        59

flag cfdpEntityId_ACN_Encode(const cfdpEntityId* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_ENTITYID		1007  /**/
flag cfdpEntityId_ACN_Decode(cfdpEntityId* pVal, BitStream* pBitStrm, int* pErrCode);
typedef struct {
    int nCount;
    byte arr[7];
} cfdpTransactionSequenceNumber;


flag cfdpTransactionSequenceNumber_Equal(const cfdpTransactionSequenceNumber* pVal1, const cfdpTransactionSequenceNumber* pVal2);

#define ERR_TRANSACTIONSEQUENCENUMBER		1008  /*(SIZE(1..7))*/
flag cfdpTransactionSequenceNumber_IsConstraintValid(const cfdpTransactionSequenceNumber* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpTransactionSequenceNumber cfdpTransactionSequenceNumber_constant;
#else
#define cfdpTransactionSequenceNumber_constant {.nCount = 1, .arr  = {[0 ... 7-1] = 0 }}
#endif

void cfdpTransactionSequenceNumber_Initialize(cfdpTransactionSequenceNumber* pVal);

#define ERR_UPER_ENCODE_TRANSACTIONSEQUENCENUMBER		1009  /**/
#define cfdpTransactionSequenceNumber_REQUIRED_BYTES_FOR_ENCODING       8
#define cfdpTransactionSequenceNumber_REQUIRED_BITS_FOR_ENCODING        59

flag cfdpTransactionSequenceNumber_Encode(const cfdpTransactionSequenceNumber* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TRANSACTIONSEQUENCENUMBER		1010  /**/
flag cfdpTransactionSequenceNumber_Decode(cfdpTransactionSequenceNumber* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_TRANSACTIONSEQUENCENUMBER		1011  /**/
#define cfdpTransactionSequenceNumber_REQUIRED_BYTES_FOR_ACN_ENCODING       8
#define cfdpTransactionSequenceNumber_REQUIRED_BITS_FOR_ACN_ENCODING        59

flag cfdpTransactionSequenceNumber_ACN_Encode(const cfdpTransactionSequenceNumber* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_TRANSACTIONSEQUENCENUMBER		1012  /**/
flag cfdpTransactionSequenceNumber_ACN_Decode(cfdpTransactionSequenceNumber* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- cfdpPDUHeader --------------------------------------------*/
typedef struct {
    cfdpProtocolVersion version;
    cfdpDirection direction;
    cfdpTransmissionMode transmission_mode;
    cfdpCRCFlag crc_flag;
    cfdpLargeFileFlag large_file_flag;
    cfdpSegmentationControl segmentation_control;
    cfdpSegmentMetadataFlag segment_metadata_flag;
    cfdpEntityId source_entity_id;
    cfdpTransactionSequenceNumber transaction_sequence_number;
    cfdpEntityId destination_entity_id;

} cfdpPDUHeader;

flag cfdpPDUHeader_Equal(const cfdpPDUHeader* pVal1, const cfdpPDUHeader* pVal2);

#define ERR_PDUHEADER		1113  /**/
#define ERR_PDUHEADER_VERSION_2		1018  /**/
#define ERR_PDUHEADER_DIRECTION_2		1028  /**/
#define ERR_PDUHEADER_TRANSMISSION_MODE_2		1038  /**/
#define ERR_PDUHEADER_CRC_FLAG_2		1048  /**/
#define ERR_PDUHEADER_LARGE_FILE_FLAG_2		1058  /**/
#define ERR_PDUHEADER_SEGMENTATION_CONTROL_2		1068  /**/
#define ERR_PDUHEADER_SEGMENT_METADATA_FLAG_2		1078  /**/
#define ERR_PDUHEADER_SOURCE_ENTITY_ID_2		1088  /**/
#define ERR_PDUHEADER_TRANSACTION_SEQUENCE_NUMBER_2		1098  /**/
#define ERR_PDUHEADER_DESTINATION_ENTITY_ID_2		1108  /**/
flag cfdpPDUHeader_IsConstraintValid(const cfdpPDUHeader* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpPDUHeader cfdpPDUHeader_constant;
#else
#define cfdpPDUHeader_constant {.version = 0UL, .direction = Direction_toward_receiver, .transmission_mode = TransmissionMode_acknowledged, .crc_flag = CRCFlag_crc_not_present, .large_file_flag = 0UL, .segmentation_control = SegmentationControl_record_boundries_not_preserved, .segment_metadata_flag = SegmentMetadataFlag_flag_present, .source_entity_id = {.nCount = 1, .arr  = {[0 ... 7-1] = 0 }}, .transaction_sequence_number = {.nCount = 1, .arr  = {[0 ... 7-1] = 0 }}, .destination_entity_id = {.nCount = 1, .arr  = {[0 ... 7-1] = 0 }}}
#endif

void cfdpPDUHeader_Initialize(cfdpPDUHeader* pVal);

#define ERR_UPER_ENCODE_PDUHEADER		1114  /**/
#define ERR_UPER_ENCODE_PDUHEADER_VERSION_2		1019  /**/
#define ERR_UPER_ENCODE_PDUHEADER_DIRECTION_2		1029  /**/
#define ERR_UPER_ENCODE_PDUHEADER_TRANSMISSION_MODE_2		1039  /**/
#define ERR_UPER_ENCODE_PDUHEADER_CRC_FLAG_2		1049  /**/
#define ERR_UPER_ENCODE_PDUHEADER_LARGE_FILE_FLAG_2		1059  /**/
#define ERR_UPER_ENCODE_PDUHEADER_SEGMENTATION_CONTROL_2		1069  /**/
#define ERR_UPER_ENCODE_PDUHEADER_SEGMENT_METADATA_FLAG_2		1079  /**/
#define ERR_UPER_ENCODE_PDUHEADER_SOURCE_ENTITY_ID_2		1089  /**/
#define ERR_UPER_ENCODE_PDUHEADER_TRANSACTION_SEQUENCE_NUMBER_2		1099  /**/
#define ERR_UPER_ENCODE_PDUHEADER_DESTINATION_ENTITY_ID_2		1109  /**/
#define cfdpPDUHeader_REQUIRED_BYTES_FOR_ENCODING       24
#define cfdpPDUHeader_REQUIRED_BITS_FOR_ENCODING        186

flag cfdpPDUHeader_Encode(const cfdpPDUHeader* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PDUHEADER		1115  /**/
#define ERR_UPER_DECODE_PDUHEADER_VERSION_2		1020  /**/
#define ERR_UPER_DECODE_PDUHEADER_DIRECTION_2		1030  /**/
#define ERR_UPER_DECODE_PDUHEADER_TRANSMISSION_MODE_2		1040  /**/
#define ERR_UPER_DECODE_PDUHEADER_CRC_FLAG_2		1050  /**/
#define ERR_UPER_DECODE_PDUHEADER_LARGE_FILE_FLAG_2		1060  /**/
#define ERR_UPER_DECODE_PDUHEADER_SEGMENTATION_CONTROL_2		1070  /**/
#define ERR_UPER_DECODE_PDUHEADER_SEGMENT_METADATA_FLAG_2		1080  /**/
#define ERR_UPER_DECODE_PDUHEADER_SOURCE_ENTITY_ID_2		1090  /**/
#define ERR_UPER_DECODE_PDUHEADER_TRANSACTION_SEQUENCE_NUMBER_2		1100  /**/
#define ERR_UPER_DECODE_PDUHEADER_DESTINATION_ENTITY_ID_2		1110  /**/
flag cfdpPDUHeader_Decode(cfdpPDUHeader* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PDUHEADER		1116  /**/
#define ERR_ACN_ENCODE_PDUHEADER_VERSION_2		1021  /**/
#define ERR_ACN_ENCODE_PDUHEADER_DIRECTION_2		1031  /**/
#define ERR_ACN_ENCODE_PDUHEADER_TRANSMISSION_MODE_2		1041  /**/
#define ERR_ACN_ENCODE_PDUHEADER_CRC_FLAG_2		1051  /**/
#define ERR_ACN_ENCODE_PDUHEADER_LARGE_FILE_FLAG_2		1061  /**/
#define ERR_ACN_ENCODE_PDUHEADER_SEGMENTATION_CONTROL_2		1071  /**/
#define ERR_ACN_ENCODE_PDUHEADER_SEGMENT_METADATA_FLAG_2		1081  /**/
#define ERR_ACN_ENCODE_PDUHEADER_SOURCE_ENTITY_ID_2		1091  /**/
#define ERR_ACN_ENCODE_PDUHEADER_TRANSACTION_SEQUENCE_NUMBER_2		1101  /**/
#define ERR_ACN_ENCODE_PDUHEADER_DESTINATION_ENTITY_ID_2		1111  /**/
#define cfdpPDUHeader_REQUIRED_BYTES_FOR_ACN_ENCODING       24
#define cfdpPDUHeader_REQUIRED_BITS_FOR_ACN_ENCODING        186

flag cfdpPDUHeader_ACN_Encode(const cfdpPDUHeader* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PDUHEADER		1117  /**/
#define ERR_ACN_DECODE_PDUHEADER_VERSION_2		1022  /**/
#define ERR_ACN_DECODE_PDUHEADER_DIRECTION_2		1032  /**/
#define ERR_ACN_DECODE_PDUHEADER_TRANSMISSION_MODE_2		1042  /**/
#define ERR_ACN_DECODE_PDUHEADER_CRC_FLAG_2		1052  /**/
#define ERR_ACN_DECODE_PDUHEADER_LARGE_FILE_FLAG_2		1062  /**/
#define ERR_ACN_DECODE_PDUHEADER_SEGMENTATION_CONTROL_2		1072  /**/
#define ERR_ACN_DECODE_PDUHEADER_SEGMENT_METADATA_FLAG_2		1082  /**/
#define ERR_ACN_DECODE_PDUHEADER_SOURCE_ENTITY_ID_2		1092  /**/
#define ERR_ACN_DECODE_PDUHEADER_TRANSACTION_SEQUENCE_NUMBER_2		1102  /**/
#define ERR_ACN_DECODE_PDUHEADER_DESTINATION_ENTITY_ID_2		1112  /**/
flag cfdpPDUHeader_ACN_Decode(cfdpPDUHeader* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- cfdpCfdpPDU --------------------------------------------*/
typedef struct {
    cfdpPDUHeader pdu_header;
    cfdpPayload payload;

} cfdpCfdpPDU;

flag cfdpCfdpPDU_Equal(const cfdpCfdpPDU* pVal1, const cfdpCfdpPDU* pVal2);

#define ERR_CFDPPDU		1465  /**/
#define ERR_CFDPPDU_PDU_HEADER_2		1462  /**/
#define ERR_CFDPPDU_PAYLOAD_2		1346  /**/
flag cfdpCfdpPDU_IsConstraintValid(const cfdpCfdpPDU* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpCfdpPDU cfdpCfdpPDU_constant;
#else
#define cfdpCfdpPDU_constant {.pdu_header = cfdpPDUHeader_constant, .payload = cfdpPayload_constant}
#endif

void cfdpCfdpPDU_Initialize(cfdpCfdpPDU* pVal);

#define ERR_UPER_ENCODE_CFDPPDU		1466  /**/
#define ERR_UPER_ENCODE_CFDPPDU_PDU_HEADER_2		1463  /**/
#define ERR_UPER_ENCODE_CFDPPDU_PAYLOAD_2		1347  /**/
#define cfdpCfdpPDU_REQUIRED_BYTES_FOR_ENCODING       285
#define cfdpCfdpPDU_REQUIRED_BITS_FOR_ENCODING        2275

flag cfdpCfdpPDU_Encode(const cfdpCfdpPDU* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_CFDPPDU		1467  /**/
#define ERR_UPER_DECODE_CFDPPDU_PDU_HEADER_2		1464  /**/
#define ERR_UPER_DECODE_CFDPPDU_PAYLOAD_2		1348  /**/
flag cfdpCfdpPDU_Decode(cfdpCfdpPDU* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_CFDPPDU		1468  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PDU_HEADER		1460  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PDU_HEADER_VERSION_2		1359  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PDU_HEADER_PDU_TYPE_UNINITIALIZED		1469  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PDU_HEADER_PDU_TYPE		1361  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PDU_HEADER_DIRECTION_2		1371  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PDU_HEADER_TRANSMISSION_MODE_2		1381  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PDU_HEADER_CRC_FLAG_2		1391  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PDU_HEADER_LARGE_FILE_FLAG_2		1401  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD		1344  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE		1323  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_DIRECTIVE_CODE_UNINITIALIZED		1405  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_DIRECTIVE_CODE		1118  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU		1315  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_EOF_PDU		1155  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_EOF_PDU_CONDITION_CODE_2		1128  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_EOF_PDU_SPARE		1130  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_EOF_PDU_FILE_CHECKSUM_2		1140  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_EOF_PDU_FILE_SIZE_2		1150  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_FINISHED_PDU		1195  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_FINISHED_PDU_CONDITION_CODE_2		1168  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_FINISHED_PDU_END_SYSTEM_STATUS		1170  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_FINISHED_PDU_DELIVERY_CODE_2		1180  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_FINISHED_PDU_FILE_STATUS_2		1190  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_ACK_PDU		1245  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_ACK_PDU_DIRECTIVE_CODE_OF_ACK_PDU_2		1208  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_ACK_PDU_DIRECTIVE_SUBTYPE_CODE_2		1218  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_ACK_PDU_CONDITION_CODE_2		1228  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_ACK_PDU_SPARE		1230  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_ACK_PDU_TRANSACTION_STATUS_2		1240  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_METADATA_PDU		1307  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_METADATA_PDU_RESERVED1		1250  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_METADATA_PDU_CLOSURE_REQUESTED_2		1260  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_METADATA_PDU_RESERVED2		1262  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_METADATA_PDU_CHECKSUM_TYPE_2		1272  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_METADATA_PDU_FILE_SIZE_2		1282  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_METADATA_PDU_SOURCE_FILE_NAME_SIZE_UNINITIALIZED		1406  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_METADATA_PDU_SOURCE_FILE_NAME_SIZE		1284  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_METADATA_PDU_SOURCE_FILE_NAME		1289  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_METADATA_PDU_DESTINATION_FILE_NAME_SIZE_UNINITIALIZED		1407  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_METADATA_PDU_DESTINATION_FILE_NAME_SIZE		1294  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_METADATA_PDU_DESTINATION_FILE_NAME		1299  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DATA		1336  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DATA_FILE_DATA_PDU		1331  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PDU_HEADER_PDU_DATA_FIELD_LENGTH_UNINITIALIZED		1470  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PDU_HEADER_PDU_DATA_FIELD_LENGTH		1403  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PDU_HEADER_SEGMENTATION_CONTROL_2		1416  /**/
#define ERR_ACN_ENCODE_UPDATE_CFDPPDU_PDU_HEADER_LENGTH_OF_ENTITY_IDS		1420  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PDU_HEADER_LENGTH_OF_ENTITY_IDS_UNINITIALIZED		1471  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PDU_HEADER_LENGTH_OF_ENTITY_IDS		1418  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PDU_HEADER_SEGMENT_METADATA_FLAG_2		1429  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PDU_HEADER_LENGTH_OF_TRANSACTION_SEQUENCE_NUMBER_UNINITIALIZED		1472  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PDU_HEADER_LENGTH_OF_TRANSACTION_SEQUENCE_NUMBER		1431  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PDU_HEADER_SOURCE_ENTITY_ID		1436  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PDU_HEADER_TRANSACTION_SEQUENCE_NUMBER		1444  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PDU_HEADER_DESTINATION_ENTITY_ID		1452  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_2		1349  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_DIRECTIVE_CODE_UNINITIALIZED		1349  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_METADATA_PDU_SOURCE_FILE_NAME_SIZE_UNINITIALIZED		1350  /**/
#define ERR_ACN_ENCODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_METADATA_PDU_DESTINATION_FILE_NAME_SIZE_UNINITIALIZED		1351  /**/
#define cfdpCfdpPDU_REQUIRED_BYTES_FOR_ACN_ENCODING       284
#define cfdpCfdpPDU_REQUIRED_BITS_FOR_ACN_ENCODING        2272

flag cfdpCfdpPDU_ACN_Encode(const cfdpCfdpPDU* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_CFDPPDU		1473  /**/
#define ERR_ACN_DECODE_CFDPPDU_PDU_HEADER		1461  /**/
#define ERR_ACN_DECODE_CFDPPDU_PDU_HEADER_VERSION_2		1360  /**/
#define ERR_ACN_DECODE_CFDPPDU_PDU_HEADER_PDU_TYPE		1362  /**/
#define ERR_ACN_DECODE_CFDPPDU_PDU_HEADER_DIRECTION_2		1372  /**/
#define ERR_ACN_DECODE_CFDPPDU_PDU_HEADER_TRANSMISSION_MODE_2		1382  /**/
#define ERR_ACN_DECODE_CFDPPDU_PDU_HEADER_CRC_FLAG_2		1392  /**/
#define ERR_ACN_DECODE_CFDPPDU_PDU_HEADER_LARGE_FILE_FLAG_2		1402  /**/
#define ERR_ACN_DECODE_CFDPPDU_PDU_HEADER_PDU_DATA_FIELD_LENGTH		1404  /**/
#define ERR_ACN_DECODE_CFDPPDU_PDU_HEADER_SEGMENTATION_CONTROL_2		1417  /**/
#define ERR_ACN_DECODE_CFDPPDU_PDU_HEADER_LENGTH_OF_ENTITY_IDS		1419  /**/
#define ERR_ACN_DECODE_CFDPPDU_PDU_HEADER_SEGMENT_METADATA_FLAG_2		1430  /**/
#define ERR_ACN_DECODE_CFDPPDU_PDU_HEADER_LENGTH_OF_TRANSACTION_SEQUENCE_NUMBER		1432  /**/
#define ERR_ACN_DECODE_CFDPPDU_PDU_HEADER_SOURCE_ENTITY_ID		1437  /**/
#define ERR_ACN_DECODE_CFDPPDU_PDU_HEADER_TRANSACTION_SEQUENCE_NUMBER		1445  /**/
#define ERR_ACN_DECODE_CFDPPDU_PDU_HEADER_DESTINATION_ENTITY_ID		1453  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_2		1350  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD		1345  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE		1324  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_DIRECTIVE_CODE		1119  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU		1316  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_EOF_PDU		1156  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_EOF_PDU_CONDITION_CODE_2		1129  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_EOF_PDU_SPARE		1131  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_EOF_PDU_FILE_CHECKSUM_2		1141  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_EOF_PDU_FILE_SIZE_2		1151  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_FINISHED_PDU		1196  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_FINISHED_PDU_CONDITION_CODE_2		1169  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_FINISHED_PDU_END_SYSTEM_STATUS		1171  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_FINISHED_PDU_DELIVERY_CODE_2		1181  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_FINISHED_PDU_FILE_STATUS_2		1191  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_ACK_PDU		1246  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_ACK_PDU_DIRECTIVE_CODE_OF_ACK_PDU_2		1209  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_ACK_PDU_DIRECTIVE_SUBTYPE_CODE_2		1219  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_ACK_PDU_CONDITION_CODE_2		1229  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_ACK_PDU_SPARE		1231  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_ACK_PDU_TRANSACTION_STATUS_2		1241  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_METADATA_PDU		1308  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_METADATA_PDU_RESERVED1		1251  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_METADATA_PDU_CLOSURE_REQUESTED_2		1261  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_METADATA_PDU_RESERVED2		1263  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_METADATA_PDU_CHECKSUM_TYPE_2		1273  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_METADATA_PDU_FILE_SIZE_2		1283  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_METADATA_PDU_SOURCE_FILE_NAME_SIZE		1285  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_METADATA_PDU_SOURCE_FILE_NAME		1290  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_METADATA_PDU_DESTINATION_FILE_NAME_SIZE		1295  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DIRECTIVE_FILE_DIRECTIVE_PDU_METADATA_PDU_DESTINATION_FILE_NAME		1300  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DATA		1337  /**/
#define ERR_ACN_DECODE_CFDPPDU_PAYLOAD_FILE_DATA_FILE_DATA_PDU		1332  /**/
flag cfdpCfdpPDU_ACN_Decode(cfdpCfdpPDU* pVal, BitStream* pBitStrm, int* pErrCode);
typedef struct {
    int nCount;
    byte arr[32];
} cfdpOptions;


flag cfdpOptions_Equal(const cfdpOptions* pVal1, const cfdpOptions* pVal2);

#define ERR_OPTIONS		1474  /*(SIZE(0..32))*/
flag cfdpOptions_IsConstraintValid(const cfdpOptions* pVal, int* pErrCode);

#ifdef __cplusplus
extern const cfdpOptions cfdpOptions_constant;
#else
#define cfdpOptions_constant {.nCount = 0, .arr  = {[0 ... 32-1] = 0 }}
#endif

void cfdpOptions_Initialize(cfdpOptions* pVal);

#define ERR_UPER_ENCODE_OPTIONS		1475  /**/
#define cfdpOptions_REQUIRED_BYTES_FOR_ENCODING       33
#define cfdpOptions_REQUIRED_BITS_FOR_ENCODING        262

flag cfdpOptions_Encode(const cfdpOptions* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_OPTIONS		1476  /**/
flag cfdpOptions_Decode(cfdpOptions* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_OPTIONS		1477  /**/
#define cfdpOptions_REQUIRED_BYTES_FOR_ACN_ENCODING       33
#define cfdpOptions_REQUIRED_BITS_FOR_ACN_ENCODING        262

flag cfdpOptions_ACN_Encode(const cfdpOptions* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_OPTIONS		1478  /**/
flag cfdpOptions_ACN_Decode(cfdpOptions* pVal, BitStream* pBitStrm, int* pErrCode);


/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */



#ifdef  __cplusplus
}

#endif

#endif
